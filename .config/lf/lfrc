# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ set
set shellopts '-eu'
set ifs "\n"
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set hidden
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ cmd

# cmd on-cd &{{
# 	# display repository status in your prompt
# 	if [ -d .git ] || [ -f .git ]; then
# 		branch=$(git branch --show-current 2>/dev/null) || true
# 		remote=$(git config --get branch.$branch.remote 2>/dev/null) || true
# 		url=$(git remote get-url $remote 2>/dev/null) || true
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [GIT BRANCH:> $branch >> $url]\033[0m"
# 	elif [ -d .hg ]; then
# 		hg=$(hg branch 2>/dev/null) || true
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [HG BRANCH:> $hg]\033[0m"
# 	elif [ -d .svn ]; then
# 		svn=$(svn info 2>/dev/null | awk '/^URL: /{print $2}') || true
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [SVN URL:> $svn]\033[0m"
# 	else
# 		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
# 	fi
# 	lf -remote "send $id set promptfmt \"$fmt\""
# }}
# # https://github.com/gokcehan/lf/wiki/Integrations#git

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
		setsid -f sxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;

	application/msword) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .doc
	application/vnd.ms-excel) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .xls
	application/vnd.ms-powerpoint) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .ppt
	application/vnd.openxmlformats-officedocument.wordprocessingml.document) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .docx
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .xlsx
	application/vnd.openxmlformats-officedocument.presentationml.presentation) setsid -f zaread $fx >/dev/null 2>&1 ;;
	# .pptx

        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
	clear
	aunpack $fx
}}

cmd delete ${{
	clear
	trash-put $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd setbg "$1"
cmd bulkrename $vidir

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ map
map <esc> :unselect; clear

map g top
map <c-j> half-down
map <c-k> half-up
map <a-j> :updir; set dironly true; down; set dironly false; open
map <a-k> :updir; set dironly true; up; set dironly false; open

map A rename				# at the very end
map I push A<c-a>			# at the very beginning
map a push A<a-b>			# after extension
map i push A<a-b><c-b>			# before extension
map c					# default: c -> clear, unmap it to use key sequence start with "c"
map cc push A<c-u>			# new rename
map cw push A<a-b><c-b><c-u>		# new rename (with extension)
map ci bulkrename
# https://github.com/gokcehan/lf/issues/279

map <enter>	$setsid -f $TERMINAL >/dev/null 2>&1
map x		$$f
map <c-x>	!$f
map o		&mimeopen "$f"
map <c-o>	$mimeopen --ask "$f"

map <a-y>	$printf "%s" "$fx" | xclip -selection clipboard
map <a-b>	$setbg $f
map <a-d> delete
map <a-e> extract
map <a-c> copyto
map <a-m> moveto

map <c-s> $lf -remote "send $id select \"$(fzf)\""
map <c-d> ${{
eval lf_dir=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)
lf -remote "send $id cd $lf_dir"
}}
#map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
# doesn't work for now, check this issue: https://github.com/LukeSmithxyz/voidrice/issues/831, my solution as above

# source
source "~/.config/lf/shortcutrc"
