#+property: header-args:emacs-lisp :tangle (concat (getenv "XDG_CONFIG_HOME") "/emacs/init.el")

* lexical binding

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-

;; https://github.com/nordtheme/emacs/issues/59#issuecomment-414882071
;; https://www.emacswiki.org/emacs/LexicalBinding
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html
#+end_src

* tangle when saving

#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle :append :local)))
;; run "org-babel-tangle" when saving any org buffer
;; manually: C-c C-v t
;; https://leanpub.com/lit-config/read#leanpub-auto-emacs-and-org-mode

(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (getenv "a_gi") "/.local/etc/.emacs/init.org"))
    (org-babel-tangle)
  )
)
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
;; run "org-babel-tangle" when saving init.org
#+end_src

* xresources

#+begin_src emacs-lisp
(setq inhibit-x-resources t)
;; (setq inhibit-x-resources t) seems also (setq inhibit-startup-screen t)
#+end_src

* appearance

#+begin_src emacs-lisp
(menu-bar-mode -1)

(tool-bar-mode -1)

(set-fringe-mode 0)
;; https://stackoverflow.com/questions/11373826/how-to-disable-fringe-in-emacs

(scroll-bar-mode -1)

(setq display-line-numbers-type 'visual)
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users
(setq display-line-numbers-current-absolute nil)
;; so that the line number width will not change, current absolute line number can be found in mode line
(global-display-line-numbers-mode 1)

(setq mode-line-client "")
;; https://emacs.stackexchange.com/questions/4018/reduce-the-space-between-elements-in-modeline
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html#Mode-Line-Variables

;; (line-number-mode 1)
;; (setq column-number-indicator-zero-based nil)
;; better not (setq column-number-indicator-zero-based nil), because this is different from assumption
(column-number-mode 1)

(setq echo-keystrokes 0.01)

(setq completions-format 'vertical)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; (global-visual-line-mode 1)
(set-default 'truncate-lines t)
;; https://www.emacswiki.org/emacs/TruncateLines
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; (add-to-list 'default-frame-alist
;;              '(font . "monospace-15"))
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html

(defun centaur-setup-fonts ()
(when (display-graphic-p)
(set-face-attribute 'default nil :family "monospace" :height 150)
(set-fontset-font t 'symbol (font-spec :family "Symbola") nil 'prepend)
(set-fontset-font t 'emoji (font-spec :family "Twemoji") nil 'prepend)
(set-fontset-font t 'han (font-spec :family "Sarasa Term SC"))
(setq face-font-rescale-alist '(("Twemoji" . 0.9) ("Sarasa Term SC" . 1.1)))
))
(centaur-setup-fonts)
;; (add-hook 'window-setup-hook #'centaur-setup-fonts)
(add-hook 'server-after-make-frame-hook #'centaur-setup-fonts)
;; https://github.com/seagle0128/.emacs.d/blob/master/custom-example.el
;; https://github.com/VitalyAnkh/config/blob/master/doom/config.org#font-face

;; (setq whitespace-style '(face trailing tabs tab-mark))
(setq whitespace-style '(face trailing tabs))
(setq whitespace-display-mappings '(
))
(global-whitespace-mode 1)
;; http://xahlee.info/emacs/emacs/whitespace-mode.html
;; http://xahlee.info/emacs/emacs/emacs_init_whitespace_mode.html

(setq show-paren-delay 0)
(show-paren-mode 1)

;; (defun set-prettify-symbols-alist ()
;; (setq prettify-symbols-alist '(
;; ("lambda" . "λ")
;; ("circle" . "○")
;; ))
;; )
;; (add-hook 'prog-mode-hook 'set-prettify-symbols-alist)
;; (global-prettify-symbols-mode 1)

(blink-cursor-mode 0)
#+end_src

* scroll

#+begin_src emacs-lisp
;; vertical scrolling

;; (setq scroll-margin 0)
;; (setq scroll-step 0)
;; when point moves off the screen, move window this line to make point visible, if failed, center the point
(setq scroll-conservatively most-positive-fixnum)
;; when point moves off the screen, move window up to this line to make point visible, if failed, center the point
;; https://www.gnu.org/software/emacs/manual/html_node/efaq/Scrolling-only-one-line.html
;; (setq scroll-down-aggressively 0.5)
;; (setq scroll-up-aggressively 0.5)

;; horizontal scrolling

(setq hscroll-margin 0)
;; (setq hscroll-conservatively nil)
;; "hscroll-conservatively" doesn't exist in emacs
;; (setq hscroll-step 2)
;; the behaviour of "hscroll-step" is strange

;; scroll & cursor
(setq next-screen-context-lines 0)
(setq scroll-preserve-screen-position t)
#+end_src

* search

#+begin_src emacs-lisp
(setq isearch-lazy-count t)
;; (setq isearch-lazy-highlight t)
;; (setq lazy-highlight-initial-delay 0)
(setq lazy-highlight-no-delay-length 1)
#+end_src

* copy & paste

#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
#+end_src

* undo

#+begin_src emacs-lisp
(setq undo-no-redo t)
#+end_src

* indent

#+begin_src emacs-lisp
;; (setq-default tab-width 8)
(setq-default indent-tabs-mode nil)
;; (setq-default tab-always-indent t)
;; (electric-indent-mode -1)
;; electric-indent-mode is a global minor mode that automatically indents the line after every RET you type, enabled by default
;; http://xahlee.info/emacs/emacs/emacs_tabs_space_indentation_setup.html

(setq sh-basic-offset 8)
#+end_src

* save & quit

#+begin_src emacs-lisp
(setq save-silently t)

;; (setq require-final-newline nil)
;; (setq mode-require-final-newline nil)
;; https://stackoverflow.com/questions/13574564/emacs-automatically-adding-a-newline-even-after-changing-emacs

(setq auto-save-visited-interval 1)
(auto-save-visited-mode 1)
;; http://xahlee.info/emacs/emacs/emacs_auto_save.html



(setq confirm-kill-processes nil)



(global-set-key (kbd "C-x C-c")
(lambda () (interactive)
(let ((current-prefix-arg '(4)))
     (call-interactively #'save-buffers-kill-terminal))
))
;; https://emacs.stackexchange.com/questions/50672/how-to-save-all-modified-buffers-and-kill-emacs
;; https://emacs.stackexchange.com/questions/48753/how-to-bind-c-u-m-x-shell-to-c-c-s
#+end_src

* extra files

#+begin_src emacs-lisp
(setq make-backup-files nil)
;; stop creating <filename>~
(setq auto-save-default nil)
;; stop creating #<filename>#
(setq create-lockfiles nil)
;; stop creating .#<filename>
(setq auto-save-list-file-prefix nil)
;; stop creating auto-save-list dir
;; (setq url-configuration-directory (concat (getenv "XDG_CACHE_HOME") "/emacs/url"))
;; move url dir
#+end_src

* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ package

emacs has a built-in package manager called "package.el"
it installs packages from "elpa"
elpa: emacs lisp package archive

gnuelpa: gnu elpa
nongnuelpa: non gnu elpa
melpa: milkypostman’s elpa

| elpa name  | official | enabled by default |
|------------+----------+--------------------|
| gnuelpa    |        1 |                  1 |
| nongnuelpa |        1 |                  1 |
| melpa      |        0 |                  0 |

https://www.emacswiki.org/emacs/InstallingPackages
https://melpa.org/#/getting-started

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; (setq package-user-dir (concat (getenv "XDG_CACHE_HOME") "/emacs/elpa"))

(setq package-selected-packages '(
;; solarized-theme
;; color-theme-sanityinc-solarized
;; nord-theme
;; color-theme-sanityinc-tomorrow
doom-themes
minions
rainbow-mode

xclip

evil
evil-anzu
evil-cleverparens
evil-collection
evil-commentary
evil-lion
evil-org
evil-rsi
evil-surround

;; valign
uuidgen
;; org-gtd
org-journal
org-roam
org-roam-ui

dirvish
vterm
fcitx
magit
paredit
sudo-edit
))
;; M-x package-refresh-contents
;; M-x package-install-selected-packages
;; M-x package-autoremove

(package-initialize)

(defun my-every (@list) "return t if all elements are true" (eval `(and ,@ @list)))
(if (not (my-every (mapcar 'package-installed-p package-selected-packages))) (error "Package missing"))
;; need to be put after (package-initialize), don't know why for now



;; https://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name
;; https://emacs.stackexchange.com/questions/28932/how-to-automate-installation-of-packages-with-emacs-file
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Errors.html
;; http://xahlee.info/emacs/emacs/elisp_mapcar_loop.html
;; http://xahlee.info/emacs/misc/emacs_lisp_some_and_every.html
#+end_src

#+begin_src emacs-lisp
(setq load-path (cons (concat (getenv "XDG_CONFIG_HOME") "/emacs/lisp") load-path))
;; http://xahlee.info/emacs/emacs/elisp_library_system.html
#+end_src

* basic

#+begin_src emacs-lisp
(xclip-mode 1)
;; copy between *terminal* emacs and x clipboard

(require 'sudo-edit)

(setq fcitx-remote-command "fcitx5-remote")
(fcitx-aggressive-setup)
;; https://github.com/cute-jumper/fcitx.el/issues?q=fcitx5
;; https://kisaragi-hiu.com/why-fcitx5
#+end_src

* evil

https://evil.readthedocs.io/en/latest/index.html

#+begin_src emacs-lisp
;; keybindings and other behaviour
(setq evil-want-C-i-jump nil)
(setq evil-want-C-u-delete t)
(setq evil-want-C-u-scroll t)
;; https://www.reddit.com/r/emacs/comments/9j34bf/evil_and_the_universal_argument/
(setq evil-want-Y-yank-to-eol t)
;; (setq evil-disable-insert-state-bindings t)

;; search
;; (setq evil-search-module 'isearch)
(setq evil-search-module 'evil-search)

;; search_isearch
;; (setq evil-flash-delay 0)

;; search_evil-search
;; (setq evil-ex-search-case 'smart)
;; (setq evil-ex-search-vim-style-regexp nil)
;; (setq evil-ex-search-interactive nil)
;; (setq evil-ex-search-incremental t)
(setq evil-ex-search-highlight-all nil)
;; (setq evil-ex-search-persistent-highlight nil)

;; indentation
(setq evil-shift-width 8)

;; cursor movement
(setq evil-move-cursor-back nil)
(setq evil-move-beyond-eol t)
(setq evil-v$-excludes-newline t)
(setq evil-cross-lines t)
(setq evil-start-of-line t)

;; cursor display
(setq evil-normal-state-cursor t)
(setq evil-insert-state-cursor t)
(setq evil-visual-state-cursor t)
(setq evil-replace-state-cursor t)
(setq evil-operator-state-cursor t)
(setq evil-motion-state-cursor t)
(setq evil-emacs-state-cursor t)

;; miscellaneous
(setq evil-undo-system 'undo-redo)

;; undocumented evil settings
(setq evil-want-change-word-to-end nil)
(setq evil-want-minibuffer t)

(setq evil-want-integration t)
(setq evil-want-keybinding nil)
;; whether to load evil-keybindings.el, which provides a set of keybindings for other emacs modes (dired etc)
;; these two variables are required by evil-collection (https://github.com/emacs-evil/evil-collection#installation)

;; require evil
(require 'evil)
;; some variables need to be set before evil is loaded, keymaps need to be set after evil is loaded, so put this line here

;; enable evil
(evil-mode 1)
#+end_src

* evil plugin

** evil-anzu

#+begin_src emacs-lisp
(setq anzu-cons-mode-line-p nil)
;; https://github.com/emacsorphanage/anzu#anzu-cons-mode-line-pdefault-is-t
(require 'evil-anzu)
(setq global-mode-string '(:eval (anzu--update-mode-line)))
;; https://emacs.stackexchange.com/questions/13855/how-to-append-string-that-gets-updated-to-mode-line
(global-anzu-mode 1)
#+end_src

** evil-cleverparens

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)
#+end_src

** evil-collection

#+begin_src emacs-lisp
;; (evil-collection-translate-key nil 'evil-normal-state-map
;; "a" "b"
;; )
;; (setq evil-collection-mode-list '())
;; (setq evil-collection-setup-minibuffer t)
;; use (setq evil-want-minibuffer t) instead of (setq evil-collection-setup-minibuffer t)
(evil-collection-init)
;; https://github.com/emacs-evil/evil-collection/issues/214
#+end_src

** evil-commentary

#+begin_src emacs-lisp
(evil-commentary-mode 1)
#+end_src

** evil-lion

#+begin_src emacs-lisp
(evil-lion-mode)
#+end_src

** evil-org

#+begin_src emacs-lisp
;; (require 'evil-org)
;; (add-hook 'org-mode-hook 'evil-org-mode)
;; (setq evil-org-key-theme '(navigation textobjects additional calendar))
;; (evil-org-set-key-theme)
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

** evil-rsi

#+begin_src emacs-lisp
(evil-rsi-mode)



;; (define-key evil-insert-state-map (kbd "C-w") 'evil-delete-backward-word)
(define-key evil-insert-state-map (kbd "C-u") 'evil-delete-back-to-indentation)
;; (define-key evil-insert-state-map (kbd "C-p") 'evil-complete-previous)
;; (define-key evil-insert-state-map (kbd "C-n") 'evil-complete-next)
;; (define-key evil-insert-state-map (kbd "C-s") nil)
;; (define-key evil-insert-state-map (kbd "C-r") 'evil-paste-from-register)
;; (define-key evil-insert-state-map (kbd "C-o") 'evil-execute-in-normal-state)
#+end_src

** evil-surround

#+begin_src emacs-lisp
(global-evil-surround-mode 1)
#+end_src

* evil keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "<f5>") 'universal-argument)
(define-key universal-argument-map (kbd "<f5>") 'universal-argument-more)
;; https://emacs.stackexchange.com/questions/58319/how-to-rebind-special-meaning-of-c-u-to-a-different-key



;; local:
(define-key evil-normal-state-map (kbd "z i") 'evil-open-fold)
(define-key evil-normal-state-map (kbd "z o") 'evil-open-fold-rec)
;; (define-key evil-normal-state-map (kbd "z c") 'evil-close-fold)
;; (define-key evil-normal-state-map (kbd "z a") 'evil-toggle-fold)
;; global:
;; (define-key evil-normal-state-map (kbd "z r") 'evil-open-folds)
;; (define-key evil-normal-state-map (kbd "z m") 'evil-close-folds)
;; https://github.com/emacs-evil/evil/blob/master/evil-maps.el



;; outline mode logic:

;;        leaf
;;      /
;; node
;;      \
;;        node

;; so only 4 functions are needed:

;; show-leaf
;; hide-leaf
;; show-node
;; hide-node

;; local:
(evil-define-key 'normal outline-mode-map (kbd "z e") 'outline-show-entry)
(evil-define-key 'normal outline-mode-map (kbd "z w") 'outline-show-children)
(evil-define-key 'normal outline-mode-map (kbd "z l") 'outline-show-branches) ; also hide leaves
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-show-subtree)
(evil-define-key 'normal outline-mode-map (kbd "z x") 'outline-hide-entry)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-leaves)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-subtree)
;; global:
(evil-define-key 'normal outline-mode-map (kbd "z k") 'outline-show-only-headings)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-show-all)
(evil-define-key 'normal outline-mode-map (kbd "z j") 'outline-hide-other)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-body)
(evil-define-key 'normal outline-mode-map (kbd "z ;") 'outline-hide-sublevels)
;; https://github.com/emacs-evil/evil-collection/blob/master/modes/outline/evil-collection-outline.el
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Visibility.html



(evil-define-key 'normal outline-mode-map (kbd "<down>") 'outline-next-visible-heading)
(evil-define-key 'normal outline-mode-map (kbd "<up>") 'outline-previous-visible-heading)
;; (evil-define-key 'normal outline-mode-map (kbd "C-j") 'outline-forward-same-level)
;; (evil-define-key 'normal outline-mode-map (kbd "C-k") 'outline-backward-same-level)
(evil-define-key 'normal outline-mode-map (kbd "<left>") 'outline-up-heading)



;; (global-set-key (kbd "S-<return>") #'org-insert-subheading)
;; (with-eval-after-load "org"
;; (define-key org-mode-map (kbd "S-<return>") #'org-insert-subheading)
;; )
;; https://emacs.stackexchange.com/a/66683/41253



(define-key evil-normal-state-map (kbd "J") (lambda () (interactive) (evil-ex-execute "put _")))
(define-key evil-normal-state-map (kbd "K") (lambda () (interactive) (evil-ex-execute "put! _")))
;; https://stackoverflow.com/questions/20438900/key-map-for-ex-command-in-emacs-evil-mode
;; (define-key evil-normal-state-map (kbd "J") (kbd ":put SPC _"))
;; (define-key evil-normal-state-map (kbd "K") (kbd ":put! SPC _"))
;; (define-key evil-normal-state-map (kbd "J") 'evil-collection-unimpaired-insert-newline-below)
;; (define-key evil-normal-state-map (kbd "K") 'evil-collection-unimpaired-insert-newline-above)

;; (define-key evil-normal-state-map (kbd "C-s") nil)

(evil-set-leader '(normal motion) (kbd "SPC"))
#+end_src

* appearance advanced

#+begin_src emacs-lisp
;; (load-theme 'nord t)
;; https://github.com/nordtheme/emacs/issues/59#issuecomment-414882071

;; (load "dl.el")

(load-theme 'doom-nord t)

(minions-mode 1)
#+end_src

* org

#+begin_src emacs-lisp
(setq org-startup-folded nil)

;; (setq org-adapt-indentation nil)
;; * level 1
;;   * level 2

;; (setq org-list-indent-offset 6)
;; - fruit
;;         - apple
;;         - banana
;; 8 - 2 = 6

;; (setq org-link-descriptive nil)

;; (setq org-edit-src-content-indentation 0)
(setq org-src-preserve-indentation t)
;; (setq org-src-preserve-indentation t) force (setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'current-window)

;; (setq org-property-format "%-10s %s")
;; (setq org-property-format "%-15s %s")
(setq org-property-format "%s %s")



;; (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "CANC(c)" "|" "DONE(d)")))
;; https://orgmode.org/manual/Workflow-states.html

(setq org-agenda-files `(,(getenv "a_aj")))

(setq org-capture-templates `(
("a" "inbox" entry (file ,(concat (getenv "a_aj") "/inbox.org")) "* %i%?")
))

(setq org-refile-use-outline-path 'file)
;; https://emacs.stackexchange.com/questions/13353/how-to-use-org-refile-to-move-a-headline-to-a-file-as-a-toplevel-headline
(setq org-refile-targets `(
;; (,(concat (getenv "a_aj") "/inbox.org") :maxlevel . 2)
(,(directory-files-recursively (getenv "a_aj") "\.org$") :maxlevel . 2)
))

;; (setq org-id-ts-format "%Y%m%dT%H%M%S.%6N")
(setq org-id-ts-format "%Y-%m-%d-%H%M%S-%6N")
(setq org-id-method 'ts)



(setq org-M-RET-may-split-line nil)

(require 'org-tempo)

(global-set-key (kbd "C-c s") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
;; https://orgmode.org/manual/Activation.html

;; (define-key global-map (kbd "C-c j a")
;;   (lambda () (interactive) (org-capture nil "a")))

(with-eval-after-load "evil"
(evil-define-key 'normal 'global (kbd "<leader>ja") (lambda () (interactive) (org-capture nil "a")))
(evil-define-key 'normal 'global (kbd "<leader>jw") 'org-refile)
(evil-define-key 'normal 'global (kbd "<leader>jl") 'org-time-stamp)
(evil-define-key 'normal 'global (kbd "<leader>l") 'calendar)
)

;; (global-set-key (kbd "C-c k a") #'org-id-get-create)
(with-eval-after-load "evil"
(evil-define-key 'normal 'global (kbd "<leader>ka") 'org-id-get-create)
)
#+end_src

* org plugin

** valign

#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook #'valign-mode)
#+end_src

** COMMENT org gtd

#+begin_src emacs-lisp
(setq org-edna-use-inheritance t)
(org-edna-mode 1)
;; https://github.com/Trevoke/org-gtd.el/blob/master/doc/org-gtd.org#required-configuration-of-sub-packages



(setq org-gtd-update-ack "3.0.0")
(setq org-gtd-directory (getenv "a_aj"))
(setq org-gtd-capture-templates '(
("i" "" entry (file org-gtd-inbox-path) "* %i%?")
))

(require 'org-gtd)



(global-set-key (kbd "C-c n c") #'org-gtd-capture)
(define-key org-gtd-clarify-map (kbd "RET") #'org-gtd-organize)
#+end_src

** COMMENT org journal

#+begin_src emacs-lisp
(setq org-journal-dir (getenv "a_al"))
(setq org-journal-file-format "%F")
(setq org-journal-date-prefix "#+title ")
(setq org-journal-date-format "%F")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "%F %a %H:%M%n")
(setq org-journal-hide-entries-p nil)

(require 'org-journal)



;; (global-set-key (kbd "C-c j a") 'org-journal-new-entry)

;; (evil-define-key 'normal calendar-mode-map (kbd "d") nil)
;; (evil-define-key 'normal calendar-mode-map (kbd "d a") 'org-journal-new-date-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader>a") 'org-journal-new-date-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader>j") 'org-journal-read-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader>k") 'org-journal-display-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader>h") 'org-journal-previous-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader>l") 'org-journal-next-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader>m") 'org-journal-mark-entries)
#+end_src

** org roam

#+begin_src emacs-lisp
;; https://www.orgroam.com/manual.html
;; https://github.com/org-roam/org-roam/issues/2031

;; (setq org-roam-directory (file-truename "~/org-roam"))
(setq org-roam-directory (getenv "a_ak"))

;; (setq org-roam-capture-templates '(
;; ("d" "default" plain "%?"
;;      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
;;                         "#+title: ${title}\n")
;;      :unnarrowed t)
;; ))
(require 'uuidgen)
(setq org-roam-capture-templates '(
("d" "default" plain "%?"
     :target (file+head "%(uuidgen-1).org"
                        "#+title: ${title}\n")
     :unnarrowed t)
))

;; (setq org-roam-dailies-directory "")

(org-roam-db-autosync-mode)



(defun convert-to-orgroam ()
(interactive)

(let ((new-file-name (concat (uuidgen-1) ".org")))
(rename-file buffer-file-name new-file-name)
(find-file new-file-name)
)

(goto-char (point-min))
(insert "\n\n")
(goto-char (point-min))

(org-id-get-create)

(beginning-of-line 4)
(insert "#+title: ")
)
(evil-define-key 'normal 'global (kbd "<leader>kl") 'convert-to-orgroam)
;; https://org-roam.discourse.group/t/convert-preexisting-org-note-to-org-roam-type/2680



;; (global-set-key (kbd "C-c k f") #'org-roam-node-find)
;; (global-set-key (kbd "C-c k i") #'org-roam-node-insert)
;; (global-set-key (kbd "C-c k c") #'org-roam-capture)
;; (global-set-key (kbd "C-c k b") #'org-roam-buffer-toggle)
;; (global-set-key (kbd "C-c k g") #'org-roam-graph)
(evil-define-key 'normal 'global (kbd "<leader>kf") 'org-roam-node-find)
(evil-define-key 'normal 'global (kbd "<leader>ki") 'org-roam-node-insert)
(evil-define-key 'normal 'global (kbd "<leader>kc") 'org-roam-capture)
(evil-define-key 'normal 'global (kbd "<leader>kb") 'org-roam-buffer-toggle)
(evil-define-key 'normal 'global (kbd "<leader>kg") 'org-roam-graph)
;; (global-set-key (kbd "C-c n h") #'org-roam-dailies-goto-yesterday)
;; (global-set-key (kbd "C-c n j") #'org-roam-dailies-goto-today)
;; (global-set-key (kbd "C-c n l") #'org-roam-dailies-goto-tomorrow)
;; (global-set-key (kbd "C-c n k") #'org-roam-dailies-goto-date)
#+end_src

* dired

#+begin_src emacs-lisp
;; http://xahlee.info/emacs/emacs/file_management.html

(setq dired-listing-switches "-Ahv --group-directories-first -l")

;; (setq dired-kill-when-opening-new-dired-buffer t)
;; https://emacs-china.org/t/emacs-28-dired-kill-when-opening-new-dired-buffer/20655
#+end_src

* COMMENT dirvish

#+begin_src emacs-lisp
(dirvish-override-dired-mode)
;; https://emacs-china.org/t/dirvish-dired/20189/60
#+end_src

* COMMENT eaf

#+begin_src emacs-lisp
(setq load-path (cons (concat (getenv "XDG_CONFIG_HOME") "/emacs/eaf") load-path))
(require 'eaf)
(require 'eaf-demo)
(require 'eaf-file-manager)
(require 'eaf-pdf-viewer)
(require 'eaf-browser)
#+end_src
