#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* core

** lexical binding

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-

;; https://github.com/nordtheme/emacs/issues/59#issuecomment-414882071
;; https://www.emacswiki.org/emacs/LexicalBinding
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html
#+end_src

** COMMENT test

#+begin_src emacs-lisp

#+end_src

** tangle when saving

#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle :append :local)))
;; run "org-babel-tangle" when saving any org buffer
;; manually: C-c C-v t
;; https://leanpub.com/lit-config/read#leanpub-auto-emacs-and-org-mode

(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (getenv "a_gi") "/.local/etc/emacs/init.org"))
    (org-babel-tangle)
    ;; (let ((inhibit-message t))
    ;;   (org-babel-tangle))
    ))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
;; run "org-babel-tangle" when saving init.org
#+end_src

** appearance

#+begin_src emacs-lisp
(setq inhibit-x-resources t)
;; (setq inhibit-x-resources t) seems also (setq inhibit-startup-screen t)



(menu-bar-mode -1)

(tool-bar-mode -1)

(set-fringe-mode 0)
;; https://stackoverflow.com/questions/11373826/how-to-disable-fringe-in-emacs

(scroll-bar-mode -1)



(setq display-line-numbers-type 'visual)
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users
(setq display-line-numbers-current-absolute nil)
;; (setq display-line-numbers-grow-only t)
;; (setq display-line-numbers-width-start t)

;; (setq-default display-line-numbers-width )

;; (setq-default display-line-numbers-widen t)
;; https://emacs.stackexchange.com/questions/48581/how-to-display-absolute-line-numbers-of-a-full-widened-buffer-when-narrowing-to

(global-display-line-numbers-mode 1)
(add-hook 'evil-emacs-state-entry-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'evil-emacs-state-exit-hook  (lambda () (display-line-numbers-mode 1)))



;; (setq mode-line-client "")
;; https://emacs.stackexchange.com/questions/4018/reduce-the-space-between-elements-in-modeline
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html#Mode-Line-Variables

;; (line-number-mode 1)
;; (setq column-number-indicator-zero-based nil)
;; better not (setq column-number-indicator-zero-based nil), because this is different from assumption
(column-number-mode 1)

(setq echo-keystrokes 0.001)
;; evil's equivalent of vim "set showcmd" is working in progress, see https://github.com/emacs-evil/evil/issues/1386
;; (setq echo-keystrokes 0)
;; can't echo immediately, can't don't echo the last key, so don't echo at all

(setq completions-format 'vertical)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; (global-visual-line-mode 1)
(set-default 'truncate-lines t)
;; https://www.emacswiki.org/emacs/TruncateLines
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; (add-to-list 'default-frame-alist
;;              '(font . "monospace-15"))
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html

(defun centaur-setup-fonts ()
(when (display-graphic-p)
(set-face-attribute 'default nil :family "monospace" :height 150)
(set-fontset-font t 'symbol (font-spec :family "Symbola") nil 'prepend)
(set-fontset-font t 'emoji (font-spec :family "Twemoji") nil 'prepend)
(set-fontset-font t 'han (font-spec :family "Noto Sans CJK SC"))
(setq face-font-rescale-alist '(("Twemoji" . 0.9) ("Noto Sans CJK SC" . 1.1)))
))
(centaur-setup-fonts)
;; (add-hook 'window-setup-hook #'centaur-setup-fonts)
(add-hook 'server-after-make-frame-hook #'centaur-setup-fonts)
;; https://github.com/seagle0128/.emacs.d/blob/master/custom-example.el
;; https://github.com/VitalyAnkh/config/blob/master/doom/config.org#font-face

;; (setq whitespace-style '(face trailing tabs tab-mark))
(setq whitespace-style '(face trailing tabs))
(setq whitespace-display-mappings '(
))
(global-whitespace-mode 1)
;; http://xahlee.info/emacs/emacs/whitespace-mode.html
;; http://xahlee.info/emacs/emacs/emacs_init_whitespace_mode.html

(setq show-paren-delay 0)
(show-paren-mode 1)

;; (defun set-prettify-symbols-alist ()
;; (setq prettify-symbols-alist '(
;; ("lambda" . "λ")
;; ("circle" . "○")
;; ))
;; )
;; (add-hook 'prog-mode-hook 'set-prettify-symbols-alist)
;; (global-prettify-symbols-mode 1)

(blink-cursor-mode 0)
#+end_src

** scroll

#+begin_src emacs-lisp
;; vertical scrolling

;; (setq scroll-margin 0)
;; (setq scroll-step 0)
;; when point moves off the screen, move window this line to make point visible, if failed, center the point
(setq scroll-conservatively most-positive-fixnum)
;; when point moves off the screen, move window up to this line to make point visible, if failed, center the point
;; https://www.gnu.org/software/emacs/manual/html_node/efaq/Scrolling-only-one-line.html
;; (setq scroll-down-aggressively 0.5)
;; (setq scroll-up-aggressively 0.5)

;; horizontal scrolling

(setq hscroll-margin 0)
;; (setq hscroll-conservatively nil)
;; "hscroll-conservatively" doesn't exist in emacs
;; (setq hscroll-step 2)
;; the behaviour of "hscroll-step" is strange

;; scroll & cursor
(setq next-screen-context-lines 0)
(setq scroll-preserve-screen-position t)
#+end_src

** search

#+begin_src emacs-lisp
(setq isearch-lazy-count t)
;; (setq isearch-lazy-highlight t)

;; (setq search-highlight nil)
(setq lazy-highlight-no-delay-length 1)
;; (setq lazy-highlight-initial-delay 0)
#+end_src

** copy & paste

#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
#+end_src

** undo

#+begin_src emacs-lisp
(setq undo-no-redo t)
#+end_src

** indent

#+begin_src emacs-lisp
;; (setq-default tab-width 8)
(setq-default indent-tabs-mode nil)
(setq-default tab-always-indent 'complete)
;; (electric-indent-mode -1)
;; electric-indent-mode is a global minor mode that automatically indents the line after every RET you type, enabled by default
;; http://xahlee.info/emacs/emacs/emacs_tabs_space_indentation_setup.html

(setq sh-basic-offset 8)
#+end_src

** save

#+begin_src emacs-lisp
(setq save-silently t)

;; (setq require-final-newline nil)
;; (setq mode-require-final-newline nil)
;; https://stackoverflow.com/questions/13574564/emacs-automatically-adding-a-newline-even-after-changing-emacs

(setq auto-save-visited-interval 1)
(auto-save-visited-mode 1)
;; http://xahlee.info/emacs/emacs/emacs_auto_save.html

(global-auto-revert-mode 1)
#+end_src

** extra files

#+begin_src emacs-lisp
(setq make-backup-files nil)
;; stop creating <filename>~
(setq auto-save-default nil)
;; stop creating #<filename>#
(setq create-lockfiles nil)
;; stop creating .#<filename>
(setq auto-save-list-file-prefix nil)
;; stop creating auto-save-list dir
;; (setq url-configuration-directory "~/.emacs.d/url")
;; move url dir
#+end_src

** misc

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
;; https://manateelazycat.github.io/2016/03/08/emacs-basic-config/

;; (setq ring-bell-function 'ignore)
;; https://manateelazycat.github.io/2016/03/08/emacs-basic-config/

(defalias 'list-buffers 'ibuffer)
#+end_src

* package

emacs has a built-in package manager called "package.el"
it installs packages from "elpa"
elpa: emacs lisp package archive

gnuelpa: gnu elpa
nongnuelpa: non gnu elpa
melpa: milkypostman’s elpa

| elpa name  | official | enabled by default |
|------------+----------+--------------------|
| gnuelpa    |        1 |                  1 |
| nongnuelpa |        1 |                  1 |
| melpa      |        0 |                  0 |

https://www.emacswiki.org/emacs/InstallingPackages
https://melpa.org/#/getting-started

** package-initialize

#+begin_src emacs-lisp
(require 'package)

;; (add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(setq package-archives '(
("gnu"          . "https://elpa.gnu.org/packages/")
;; ("gnu-devel"    . "https://elpa.gnu.org/devel/")
("nongnu"       . "https://elpa.nongnu.org/nongnu/")
("melpa"        . "https://melpa.org/packages/")
("melpa-stable" . "https://stable.melpa.org/packages/")
))

;; (setq package-archives '(
;; ("gnu-cn"          . "http://1.15.88.122/gnu/")
;; ("nongnu-cn"       . "http://1.15.88.122/nongnu/")
;; ("melpa-cn"        . "http://1.15.88.122/melpa/")
;; ("melpa-stable-cn" . "http://1.15.88.122/stable-melpa/")
;; ))
;; https://elpamirror.emacs-china.org/

;; (setq package-user-dir "~/.emacs.d/elpa")

(setq package-selected-packages '(
;; color-theme-sanityinc-solarized
;; color-theme-sanityinc-tomorrow
nord-theme
;; org-gtd
;; solarized-theme
;; valign
dirvish
doom-themes
evil
evil-anzu
evil-cleverparens
evil-collection
evil-commentary
evil-lion
evil-org
evil-replace-with-char
evil-replace-with-register
evil-rsi
evil-surround
fcitx
magit
minions
org-journal
org-roam
org-roam-ui
paredit
rainbow-mode
sudo-edit
uuidgen
vertico
vterm
xclip
orderless
marginalia
consult
embark
company
undo-fu
xresources-theme
dired-preview
evil-nerd-commenter
clipetty
doom-modeline
edwina
popper
shackle
standard-themes
))
;; M-x package-refresh-contents
;; M-x package-install-selected-packages
;; M-x package-autoremove

(package-initialize)

;; https://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name
;; https://emacs.stackexchange.com/questions/28932/how-to-automate-installation-of-packages-with-emacs-file
#+end_src

** check package-selected-packages

#+begin_src emacs-lisp
(defun my-every (@list) "return t if all elements are true" (eval `(and ,@ @list)))
(if (not (my-every (mapcar 'package-installed-p package-selected-packages))) (error "Package missing"))
;; need to be put after (package-initialize), don't know why for now

;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Errors.html
;; http://xahlee.info/emacs/emacs/elisp_mapcar_loop.html
;; http://xahlee.info/emacs/misc/emacs_lisp_some_and_every.html
#+end_src

** load-path

#+begin_src emacs-lisp
(let ((default-directory  "~/.emacs.d/src/"))
  (normal-top-level-add-subdirs-to-load-path))

;; http://xahlee.info/emacs/emacs/elisp_library_system.html
;; https://www.emacswiki.org/emacs/LoadPath
#+end_src

** debug

#+begin_src emacs-lisp
;; (top-level)
;; https://emacs.stackexchange.com/questions/75179/how-to-stop-evaluating-within-emacs-for-debugging-purposes

;; (error "Done")
;; https://stackoverflow.com/questions/25393418/stop-execution-of-emacs
#+end_src

* package_appearance

** COMMENT theme_standard-dark

#+begin_src emacs-lisp
(load-theme 'standard-dark)
#+end_src

** COMMENT theme_nord

#+begin_src emacs-lisp
(load-theme 'nord t)
;; https://github.com/nordtheme/emacs/issues/59#issuecomment-414882071
#+end_src

** COMMENT theme_doom-nord

#+begin_src emacs-lisp
;; (setq doom-nord-brighter-modeline t)
;; (setq doom-nord-brighter-comments t)
;; (setq doom-nord-padded-modeline   t)
;; (setq doom-nord-comment-bg        t)
;; (setq doom-nord-region-highlight  t)

(load-theme 'doom-nord t)
;; https://github.com/doomemacs/themes#customization

(custom-set-faces
`(cursor ((t (:background ,(doom-color 'base7)))))
`(mode-line ((t (:background ,(doom-color 'base5) :foreground ,(doom-color 'fg-alt)))))
)
#+end_src

** COMMENT theme_xresources

#+begin_src emacs-lisp
(load-theme 'xresources t)
#+end_src

** theme_penumbra

http://xahlee.info/emacs/emacs/emacs_create_theme.html
https://github.com/lthms/colorless-themes.el/blob/master/colorless-themes.el
https://gitlab.com/esessoms/nofrils-theme/-/blob/master/nofrils-dark-theme.el?ref_type=heads
https://github.com/nordtheme/emacs/blob/develop/nord-theme.el
https://github.com/protesilaos/standard-themes/blob/main/standard-themes.el

#+begin_src emacs-lisp :tangle ~/.emacs.d/penumbra-theme.el
;; -*- lexical-binding: t -*-

(deftheme penumbra)

;; (global-font-lock-mode 0)

(let
(

;; ;; penumbra-dark0
;; (sun1    "#fffdfb")
;; (sun     "#fff7ed")
;; (sun0    "#f2e6d4")
;; (sky1    "#bebebe")
;; (sky     "#8f8f8f")
;; (sky0    "#636363")
;; (shade1  "#3e4044")
;; (shade   "#303338")
;; (shade0  "#24272b")
;; (red     "#cb7459")
;; (yellow  "#a38f2d")
;; (green   "#46a473")
;; (cyan    "#00a0be")
;; (blue    "#7e87d6")
;; (magenta "#bd72a8")

;; ;; penumbra-dark1
;; (sun1    "#fffdfb")
;; (sun     "#fff7ed")
;; (sun0    "#f2e6d4")
;; (sky1    "#cecece")
;; (sky     "#9e9e9e")
;; (sky0    "#636363")
;; (shade1  "#3e4044")
;; (shade   "#24272b")
;; (shade0  "#181b1f")
;; (red     "#e18163")
;; (yellow  "#b49e33")
;; (green   "#4eb67f")
;; (cyan    "#00b0d2")
;; (blue    "#8c96ec")
;; (magenta "#d07eba")

;; penumbra-dark2
(sun1    "#fffdfb")
(sun     "#fff7ed")
(sun0    "#f2e6d4")
(sky1    "#dedede")
(sky     "#aeaeae")
(sky0    "#636363")
(shade1  "#3e4044")
(shade   "#181b1f")
(shade0  "#0d0f13")
(red     "#f48e74")
(yellow  "#c7ad40")
(green   "#61c68a")
(cyan    "#1ac2e1")
(blue    "#97a6ff")
(magenta "#e18dce")

)

(custom-theme-set-faces
'penumbra
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`(default                                   ((t (:background ,shade :foreground ,sky))))

`(Info-quoted                               ((t ())))
`(Man-overstrike                            ((t ())))
`(Man-underline                             ((t ())))
`(TeX-error-description-error               ((t ())))
`(TeX-error-description-help                ((t ())))
`(TeX-error-description-tex-said            ((t ())))
`(TeX-error-description-warning             ((t ())))
`(all-the-icons-blue                        ((t ())))
`(all-the-icons-blue-alt                    ((t ())))
`(all-the-icons-cyan                        ((t ())))
`(all-the-icons-cyan-alt                    ((t ())))
`(all-the-icons-dblue                       ((t ())))
`(all-the-icons-dcyan                       ((t ())))
`(all-the-icons-dgreen                      ((t ())))
`(all-the-icons-dired-dir-face              ((t ())))
`(all-the-icons-dmaroon                     ((t ())))
`(all-the-icons-dorange                     ((t ())))
`(all-the-icons-dpink                       ((t ())))
`(all-the-icons-dpurple                     ((t ())))
`(all-the-icons-dred                        ((t ())))
`(all-the-icons-dsilver                     ((t ())))
`(all-the-icons-dyellow                     ((t ())))
`(all-the-icons-green                       ((t ())))
`(all-the-icons-ibuffer-dir-face            ((t ())))
`(all-the-icons-ibuffer-file-face           ((t ())))
`(all-the-icons-ibuffer-mode-face           ((t ())))
`(all-the-icons-ibuffer-size-face           ((t ())))
`(all-the-icons-lblue                       ((t ())))
`(all-the-icons-lcyan                       ((t ())))
`(all-the-icons-lgreen                      ((t ())))
`(all-the-icons-lmaroon                     ((t ())))
`(all-the-icons-lorange                     ((t ())))
`(all-the-icons-lpink                       ((t ())))
`(all-the-icons-lpurple                     ((t ())))
`(all-the-icons-lred                        ((t ())))
`(all-the-icons-lsilver                     ((t ())))
`(all-the-icons-lyellow                     ((t ())))
`(all-the-icons-maroon                      ((t ())))
`(all-the-icons-orange                      ((t ())))
`(all-the-icons-pink                        ((t ())))
`(all-the-icons-purple                      ((t ())))
`(all-the-icons-purple-alt                  ((t ())))
`(all-the-icons-red                         ((t ())))
`(all-the-icons-red-alt                     ((t ())))
`(all-the-icons-silver                      ((t ())))
`(all-the-icons-yellow                      ((t ())))
`(ansi-color-black                          ((t ())))
`(ansi-color-blue                           ((t ())))
`(ansi-color-bold                           ((t ())))
`(ansi-color-bright-black                   ((t ())))
`(ansi-color-bright-blue                    ((t ())))
`(ansi-color-bright-cyan                    ((t ())))
`(ansi-color-bright-green                   ((t ())))
`(ansi-color-bright-magenta                 ((t ())))
`(ansi-color-bright-red                     ((t ())))
`(ansi-color-bright-white                   ((t ())))
`(ansi-color-bright-yellow                  ((t ())))
`(ansi-color-cyan                           ((t ())))
`(ansi-color-green                          ((t ())))
`(ansi-color-magenta                        ((t ())))
`(ansi-color-red                            ((t ())))
`(ansi-color-white                          ((t ())))
`(ansi-color-yellow                         ((t ())))
`(anzu-mode-line                            ((t ())))
`(anzu-mode-line-no-match                   ((t ())))
`(appt-notification                         ((t ())))
`(auto-dim-other-buffers-face               ((t ())))
`(avy-lead-face                             ((t ())))
`(avy-lead-face-0                           ((t ())))
`(avy-lead-face-1                           ((t ())))
`(avy-lead-face-2                           ((t ())))
`(bold                                      ((t ())))
`(bold-italic                               ((t ())))
`(bongo-album-title                         ((t ())))
`(bongo-artist                              ((t ())))
`(bongo-currently-playing-track             ((t ())))
`(bongo-elapsed-track-part                  ((t ())))
`(bongo-filled-seek-bar                     ((t ())))
`(bongo-marked-track                        ((t ())))
`(bongo-marked-track-line                   ((t ())))
`(bongo-played-track                        ((t ())))
`(bongo-track-length                        ((t ())))
`(bongo-track-title                         ((t ())))
`(bongo-unfilled-seek-bar                   ((t ())))
`(bookmark-face                             ((t ())))
`(bookmark-menu-bookmark                    ((t ())))
`(border                                    ((t ())))
`(breadcrumb-face                           ((t ())))
`(breadcrumb-imenu-leaf-face                ((t ())))
`(breadcrumb-project-leaf-face              ((t ())))
`(buffer-menu-buffer                        ((t ())))
`(button                                    ((t (:foreground ,blue))))
`(c-annotation-face                         ((t ())))
`(calendar-month-header                     ((t ())))
`(calendar-today                            ((t ())))
`(calendar-weekday-header                   ((t ())))
`(calendar-weekend-header                   ((t ())))
`(centaur-tabs-active-bar-face              ((t ())))
`(centaur-tabs-close-mouse-face             ((t ())))
`(centaur-tabs-close-selected               ((t ())))
`(centaur-tabs-close-unselected             ((t ())))
`(centaur-tabs-default                      ((t ())))
`(centaur-tabs-modified-marker-selected     ((t ())))
`(centaur-tabs-modified-marker-unselected   ((t ())))
`(centaur-tabs-selected                     ((t ())))
`(centaur-tabs-selected-modified            ((t ())))
`(centaur-tabs-unselected                   ((t ())))
`(centaur-tabs-unselected-modified          ((t ())))
`(change-log-acknowledgment                 ((t ())))
`(change-log-conditionals                   ((t ())))
`(change-log-date                           ((t ())))
`(change-log-email                          ((t ())))
`(change-log-file                           ((t ())))
`(change-log-function                       ((t ())))
`(change-log-list                           ((t ())))
`(change-log-name                           ((t ())))
`(child-frame-border                        ((t ())))
`(cider-deprecated-face                     ((t ())))
`(cider-enlightened-face                    ((t ())))
`(cider-enlightened-local-face              ((t ())))
`(cider-error-highlight-face                ((t ())))
`(cider-fringe-good-face                    ((t ())))
`(cider-instrumented-face                   ((t ())))
`(cider-reader-conditional-face             ((t ())))
`(cider-repl-prompt-face                    ((t ())))
`(cider-repl-stderr-face                    ((t ())))
`(cider-repl-stdout-face                    ((t ())))
`(cider-result-overlay-face                 ((t ())))
`(cider-warning-highlight-face              ((t ())))
`(clojure-keyword-face                      ((t ())))
`(comint-highlight-input                    ((t ())))
`(comint-highlight-prompt                   ((t ())))
`(company-coq-coqdoc-h1-face                ((t ())))
`(company-coq-coqdoc-h2-face                ((t ())))
`(company-echo-common                       ((t ())))
`(company-preview                           ((t ())))
`(company-preview-common                    ((t ())))
`(company-preview-search                    ((t ())))
`(company-scrollbar-bg                      ((t ())))
`(company-scrollbar-fg                      ((t ())))
`(company-template-field                    ((t ())))
`(company-tooltip                           ((t ())))
`(company-tooltip-annotation                ((t ())))
`(company-tooltip-annotation-selection      ((t ())))
`(company-tooltip-common                    ((t ())))
`(company-tooltip-common-selection          ((t ())))
`(company-tooltip-deprecated                ((t ())))
`(company-tooltip-mouse                     ((t ())))
`(company-tooltip-scrollbar-thumb           ((t ())))
`(company-tooltip-scrollbar-track           ((t ())))
`(company-tooltip-search                    ((t ())))
`(company-tooltip-search-selection          ((t ())))
`(company-tooltip-selection                 ((t ())))
`(compilation-column-number                 ((t ())))
`(compilation-error                         ((t ())))
`(compilation-info                          ((t ())))
`(compilation-line-number                   ((t ())))
`(compilation-mode-line-exit                ((t ())))
`(compilation-mode-line-fail                ((t ())))
`(compilation-mode-line-run                 ((t ())))
`(compilation-warning                       ((t ())))
`(completions-annotations                   ((t ())))
`(completions-common-part                   ((t ())))
`(completions-first-difference              ((t ())))
`(completions-group-title                   ((t ())))
`(consult-async-split                       ((t ())))
`(consult-imenu-prefix                      ((t ())))
`(consult-key                               ((t ())))
`(consult-line-number                       ((t ())))
`(consult-separator                         ((t ())))
`(coq-cheat-face                            ((t ())))
`(coq-solve-tactics-face                    ((t ())))
`(corfu-bar                                 ((t ())))
`(corfu-border                              ((t ())))
`(corfu-candidate-overlay-face              ((t ())))
`(corfu-current                             ((t ())))
`(corfu-default                             ((t ())))
`(cursor                                    ((t ())))
`(custom-button                             ((t ())))
`(custom-button-mouse                       ((t ())))
`(custom-button-pressed                     ((t ())))
`(custom-button-pressed-unraised            ((t ())))
`(custom-button-unraised                    ((t ())))
`(custom-changed                            ((t ())))
`(custom-comment                            ((t ())))
`(custom-comment-tag                        ((t ())))
`(custom-documentation                      ((t ())))
`(custom-face-tag                           ((t ())))
`(custom-group-tag                          ((t ())))
`(custom-group-tag-1                        ((t ())))
`(custom-invalid                            ((t ())))
`(custom-modified                           ((t ())))
`(custom-rogue                              ((t ())))
`(custom-saved                              ((t ())))
`(custom-set                                ((t ())))
`(custom-state                              ((t ())))
`(custom-themed                             ((t ())))
`(custom-variable-obsolete                  ((t ())))
`(custom-variable-tag                       ((t ())))
`(custom-visibility                         ((t ())))
`(denote-faces-date                         ((t ())))
`(denote-faces-keywords                     ((t ())))
`(diary                                     ((t ())))
`(diary-anniversary                         ((t ())))
`(diary-time                                ((t ())))
`(dictionary-button-face                    ((t ())))
`(dictionary-reference-face                 ((t ())))
`(dictionary-word-definition-face           ((t ())))
`(dictionary-word-entry-face                ((t ())))
`(diff-added                                ((t ())))
`(diff-changed                              ((t ())))
`(diff-changed-unspecified                  ((t ())))
`(diff-context                              ((t ())))
`(diff-error                                ((t ())))
`(diff-file-header                          ((t ())))
`(diff-function                             ((t ())))
`(diff-header                               ((t ())))
`(diff-hl-change                            ((t ())))
`(diff-hl-delete                            ((t ())))
`(diff-hl-insert                            ((t ())))
`(diff-hl-reverted-hunk-highlight           ((t ())))
`(diff-hunk-header                          ((t ())))
`(diff-index                                ((t ())))
`(diff-indicator-added                      ((t ())))
`(diff-indicator-changed                    ((t ())))
`(diff-indicator-removed                    ((t ())))
`(diff-nonexistent                          ((t ())))
`(diff-refine-added                         ((t ())))
`(diff-refine-changed                       ((t ())))
`(diff-refine-removed                       ((t ())))
`(diff-removed                              ((t ())))
`(dired-broken-symlink                      ((t ())))
`(dired-directory                           ((t ())))
`(dired-flagged                             ((t ())))
`(dired-header                              ((t ())))
`(dired-ignored                             ((t ())))
`(dired-mark                                ((t ())))
`(dired-marked                              ((t ())))
`(dired-subtree-depth-1-face                ((t ())))
`(dired-subtree-depth-2-face                ((t ())))
`(dired-subtree-depth-3-face                ((t ())))
`(dired-subtree-depth-4-face                ((t ())))
`(dired-subtree-depth-5-face                ((t ())))
`(dired-subtree-depth-6-face                ((t ())))
`(dired-symlink                             ((t ())))
`(dired-warning                             ((t ())))
`(diredfl-autofile-name                     ((t ())))
`(diredfl-compressed-file-name              ((t ())))
`(diredfl-compressed-file-suffix            ((t ())))
`(diredfl-date-time                         ((t ())))
`(diredfl-deletion                          ((t ())))
`(diredfl-deletion-file-name                ((t ())))
`(diredfl-dir-heading                       ((t ())))
`(diredfl-dir-name                          ((t ())))
`(diredfl-dir-priv                          ((t ())))
`(diredfl-exec-priv                         ((t ())))
`(diredfl-executable-tag                    ((t ())))
`(diredfl-file-name                         ((t ())))
`(diredfl-file-suffix                       ((t ())))
`(diredfl-flag-mark                         ((t ())))
`(diredfl-flag-mark-line                    ((t ())))
`(diredfl-ignored-file-name                 ((t ())))
`(diredfl-link-priv                         ((t ())))
`(diredfl-no-priv                           ((t ())))
`(diredfl-number                            ((t ())))
`(diredfl-other-priv                        ((t ())))
`(diredfl-rare-priv                         ((t ())))
`(diredfl-read-priv                         ((t ())))
`(diredfl-symlink                           ((t ())))
`(diredfl-tagged-autofile-name              ((t ())))
`(diredfl-write-priv                        ((t ())))
`(diredp-file-suffix                        ((t ())))
`(diredp-ignored-file-name                  ((t ())))
`(dirvish-hl-line                           ((t ())))
`(doom-modeline-bar                         ((t ())))
`(doom-modeline-bar-inactive                ((t ())))
`(doom-modeline-battery-charging            ((t ())))
`(doom-modeline-battery-critical            ((t ())))
`(doom-modeline-battery-error               ((t ())))
`(doom-modeline-battery-full                ((t ())))
`(doom-modeline-battery-warning             ((t ())))
`(doom-modeline-buffer-file                 ((t ())))
`(doom-modeline-buffer-major-mode           ((t ())))
`(doom-modeline-buffer-minor-mode           ((t ())))
`(doom-modeline-buffer-modified             ((t ())))
`(doom-modeline-buffer-path                 ((t ())))
`(doom-modeline-evil-emacs-state            ((t ())))
`(doom-modeline-evil-insert-state           ((t ())))
`(doom-modeline-evil-motion-state           ((t ())))
`(doom-modeline-evil-normal-state           ((t ())))
`(doom-modeline-evil-operator-state         ((t ())))
`(doom-modeline-evil-replace-state          ((t ())))
`(doom-modeline-evil-visual-state           ((t ())))
`(doom-modeline-info                        ((t ())))
`(doom-modeline-input-method                ((t ())))
`(doom-modeline-lsp-error                   ((t ())))
`(doom-modeline-lsp-running                 ((t ())))
`(doom-modeline-lsp-success                 ((t ())))
`(doom-modeline-lsp-warning                 ((t ())))
`(doom-modeline-notification                ((t ())))
`(doom-modeline-project-dir                 ((t ())))
`(doom-modeline-project-parent-dir          ((t ())))
`(doom-modeline-project-root-dir            ((t ())))
`(doom-modeline-repl-success                ((t ())))
`(doom-modeline-repl-warning                ((t ())))
`(doom-modeline-time                        ((t ())))
`(doom-modeline-urgent                      ((t ())))
`(doom-modeline-warning                     ((t ())))
`(ediff-current-diff-A                      ((t ())))
`(ediff-current-diff-Ancestor               ((t ())))
`(ediff-current-diff-B                      ((t ())))
`(ediff-current-diff-C                      ((t ())))
`(ediff-even-diff-A                         ((t ())))
`(ediff-even-diff-Ancestor                  ((t ())))
`(ediff-even-diff-B                         ((t ())))
`(ediff-even-diff-C                         ((t ())))
`(ediff-fine-diff-A                         ((t ())))
`(ediff-fine-diff-Ancestor                  ((t ())))
`(ediff-fine-diff-B                         ((t ())))
`(ediff-fine-diff-C                         ((t ())))
`(ediff-odd-diff-A                          ((t ())))
`(ediff-odd-diff-Ancestor                   ((t ())))
`(ediff-odd-diff-B                          ((t ())))
`(ediff-odd-diff-C                          ((t ())))
`(edmacro-label                             ((t ())))
`(eglot-diagnostic-tag-unnecessary-face     ((t ())))
`(eglot-mode-line                           ((t ())))
`(elfeed-log-date-face                      ((t ())))
`(elfeed-log-debug-level-face               ((t ())))
`(elfeed-log-error-level-face               ((t ())))
`(elfeed-log-info-level-face                ((t ())))
`(elfeed-log-warn-level-face                ((t ())))
`(elfeed-search-date-face                   ((t ())))
`(elfeed-search-feed-face                   ((t ())))
`(elfeed-search-filter-face                 ((t ())))
`(elfeed-search-last-update-face            ((t ())))
`(elfeed-search-tag-face                    ((t ())))
`(elfeed-search-title-face                  ((t ())))
`(elfeed-search-unread-count-face           ((t ())))
`(elfeed-search-unread-title-face           ((t ())))
`(elisp-shorthand-font-lock-face            ((t ())))
`(elixir-atom-face                          ((t ())))
`(elixir-attribute-face                     ((t ())))
`(embark-collect-group-title                ((t ())))
`(embark-collect-marked                     ((t ())))
`(embark-collect-zebra-highlight            ((t ())))
`(embark-keybinding                         ((t ())))
`(embark-keybinding-repeat                  ((t ())))
`(enh-ruby-heredoc-delimiter-face           ((t ())))
`(enh-ruby-op-face                          ((t ())))
`(enh-ruby-regexp-delimiter-face            ((t ())))
`(enh-ruby-regexp-face                      ((t ())))
`(enh-ruby-string-delimiter-face            ((t ())))
`(epa-field-body                            ((t ())))
`(epa-field-name                            ((t ())))
`(epa-mark                                  ((t ())))
`(epa-string                                ((t ())))
`(epa-validity-disabled                     ((t ())))
`(epa-validity-high                         ((t ())))
`(epa-validity-low                          ((t ())))
`(epa-validity-medium                       ((t ())))
`(erm-syn-errline                           ((t ())))
`(erm-syn-warnline                          ((t ())))
`(error                                     ((t ())))
`(escape-glyph                              ((t (:foreground ,red))))
`(eshell-ls-archive                         ((t ())))
`(eshell-ls-backup                          ((t ())))
`(eshell-ls-clutter                         ((t ())))
`(eshell-ls-directory                       ((t ())))
`(eshell-ls-executable                      ((t ())))
`(eshell-ls-missing                         ((t ())))
`(eshell-ls-product                         ((t ())))
`(eshell-ls-readonly                        ((t ())))
`(eshell-ls-special                         ((t ())))
`(eshell-ls-symlink                         ((t ())))
`(eshell-ls-unreadable                      ((t ())))
`(eshell-prompt                             ((t ())))
`(evil-ex-commands                          ((t ())))
`(evil-ex-info                              ((t ())))
`(evil-ex-lazy-highlight                    ((t ())))
`(evil-ex-search                            ((t (:background ,sky :foreground ,shade))))
`(evil-ex-substitute-matches                ((t ())))
`(evil-ex-substitute-replacement            ((t ())))
`(eww-form-checkbox                         ((t ())))
`(eww-form-file                             ((t ())))
`(eww-form-select                           ((t ())))
`(eww-form-submit                           ((t ())))
`(eww-form-text                             ((t ())))
`(eww-form-textarea                         ((t ())))
`(eww-invalid-certificate                   ((t ())))
`(eww-valid-certificate                     ((t ())))
`(file-name-shadow                          ((t ())))
`(fill-column-indicator                     ((t ())))
`(flycheck-error                            ((t ())))
`(flycheck-fringe-error                     ((t ())))
`(flycheck-fringe-info                      ((t ())))
`(flycheck-fringe-warning                   ((t ())))
`(flycheck-info                             ((t ())))
`(flycheck-warning                          ((t ())))
`(flymake-end-of-line-diagnostics-face      ((t ())))
`(flymake-error                             ((t ())))
`(flymake-error-echo                        ((t ())))
`(flymake-error-echo-at-eol                 ((t ())))
`(flymake-note                              ((t ())))
`(flymake-note-echo                         ((t ())))
`(flymake-note-echo-at-eol                  ((t ())))
`(flymake-warning                           ((t ())))
`(flymake-warning-echo                      ((t ())))
`(flyspell-duplicate                        ((t ())))
`(flyspell-incorrect                        ((t ())))
`(focus-unfocused                           ((t ())))
`(font-latex-bold-face                      ((t ())))
`(font-latex-doctex-documentation-face      ((t ())))
`(font-latex-doctex-preprocessor-face       ((t ())))
`(font-latex-italic-face                    ((t ())))
`(font-latex-match-reference-keywords       ((t ())))
`(font-latex-match-variable-keywords        ((t ())))
`(font-latex-math-face                      ((t ())))
`(font-latex-script-char-face               ((t ())))
`(font-latex-sectioning-0-face              ((t ())))
`(font-latex-sectioning-1-face              ((t ())))
`(font-latex-sectioning-2-face              ((t ())))
`(font-latex-sectioning-3-face              ((t ())))
`(font-latex-sectioning-4-face              ((t ())))
`(font-latex-sectioning-5-face              ((t ())))
`(font-latex-sedate-face                    ((t ())))
`(font-latex-slide-title-face               ((t ())))
`(font-latex-string-face                    ((t ())))
`(font-latex-subscript-face                 ((t ())))
`(font-latex-superscript-face               ((t ())))
`(font-latex-underline-face                 ((t ())))
`(font-latex-verbatim-face                  ((t ())))
`(font-latex-warning-face                   ((t ())))
`(font-lock-builtin-face                    ((t ())))
`(font-lock-comment-delimiter-face          ((t (:foreground ,sky0))))
`(font-lock-comment-face                    ((t (:foreground ,sky0))))
`(font-lock-constant-face                   ((t ())))
`(font-lock-doc-face                        ((t ())))
`(font-lock-function-name-face              ((t ())))
`(font-lock-keyword-face                    ((t ())))
`(font-lock-negation-char-face              ((t ())))
`(font-lock-preprocessor-face               ((t ())))
`(font-lock-reference-face                  ((t ())))
`(font-lock-regexp-grouping-backslash       ((t ())))
`(font-lock-regexp-grouping-construct       ((t ())))
`(font-lock-string-face                     ((t ())))
`(font-lock-type-face                       ((t ())))
`(font-lock-variable-name-face              ((t ())))
`(font-lock-warning-face                    ((t ())))
`(fringe                                    ((t ())))
`(git-commit-comment-action                 ((t ())))
`(git-commit-comment-branch-local           ((t ())))
`(git-commit-comment-branch-remote          ((t ())))
`(git-commit-comment-file                   ((t ())))
`(git-commit-comment-heading                ((t ())))
`(git-commit-keyword                        ((t ())))
`(git-commit-nonempty-second-line           ((t ())))
`(git-commit-overlong-summary               ((t ())))
`(git-commit-summary                        ((t ())))
`(git-gutter+-added                         ((t ())))
`(git-gutter+-deleted                       ((t ())))
`(git-gutter+-modified                      ((t ())))
`(git-gutter:added                          ((t ())))
`(git-gutter:deleted                        ((t ())))
`(git-gutter:modified                       ((t ())))
`(git-rebase-comment-hash                   ((t ())))
`(git-rebase-comment-heading                ((t ())))
`(git-rebase-description                    ((t ())))
`(git-rebase-hash                           ((t ())))
`(glyphless-char                            ((t (:foreground ,red :height 0.6))))
`(gnus-button                               ((t ())))
`(gnus-cite-1                               ((t ())))
`(gnus-cite-10                              ((t ())))
`(gnus-cite-11                              ((t ())))
`(gnus-cite-2                               ((t ())))
`(gnus-cite-3                               ((t ())))
`(gnus-cite-4                               ((t ())))
`(gnus-cite-5                               ((t ())))
`(gnus-cite-6                               ((t ())))
`(gnus-cite-7                               ((t ())))
`(gnus-cite-8                               ((t ())))
`(gnus-cite-9                               ((t ())))
`(gnus-cite-attribution                     ((t ())))
`(gnus-emphasis-bold                        ((t ())))
`(gnus-emphasis-bold-italic                 ((t ())))
`(gnus-emphasis-highlight-words             ((t ())))
`(gnus-emphasis-italic                      ((t ())))
`(gnus-emphasis-underline-bold              ((t ())))
`(gnus-emphasis-underline-bold-italic       ((t ())))
`(gnus-emphasis-underline-italic            ((t ())))
`(gnus-header-content                       ((t ())))
`(gnus-header-from                          ((t ())))
`(gnus-header-name                          ((t ())))
`(gnus-header-newsgroups                    ((t ())))
`(gnus-header-subject                       ((t ())))
`(gnus-server-agent                         ((t ())))
`(gnus-server-closed                        ((t ())))
`(gnus-server-cloud                         ((t ())))
`(gnus-server-cloud-host                    ((t ())))
`(gnus-server-denied                        ((t ())))
`(gnus-server-offline                       ((t ())))
`(gnus-server-opened                        ((t ())))
`(gnus-summary-selected                     ((t ())))
`(haskell-pragma-face                       ((t ())))
`(header-line                               ((t ())))
`(header-line-highlight                     ((t ())))
`(helm-bookmark-addressbook                 ((t ())))
`(helm-bookmark-directory                   ((t ())))
`(helm-bookmark-file                        ((t ())))
`(helm-bookmark-gnus                        ((t ())))
`(helm-bookmark-info                        ((t ())))
`(helm-bookmark-man                         ((t ())))
`(helm-bookmark-w3m                         ((t ())))
`(helm-buffer-directory                     ((t ())))
`(helm-buffer-file                          ((t ())))
`(helm-buffer-not-saved                     ((t ())))
`(helm-buffer-process                       ((t ())))
`(helm-candidate-number                     ((t ())))
`(helm-candidate-number-suspended           ((t ())))
`(helm-ff-directory                         ((t ())))
`(helm-ff-dirs                              ((t ())))
`(helm-ff-dotted-director                   ((t ())))
`(helm-ff-dotted-directory                  ((t ())))
`(helm-ff-dotted-symlink-director           ((t ())))
`(helm-ff-executable                        ((t ())))
`(helm-ff-file                              ((t ())))
`(helm-ff-invalid-symlink                   ((t ())))
`(helm-ff-prefix                            ((t ())))
`(helm-ff-symlink                           ((t ())))
`(helm-grep-cmd-line                        ((t ())))
`(helm-grep-file                            ((t ())))
`(helm-grep-finish                          ((t ())))
`(helm-grep-lineno                          ((t ())))
`(helm-grep-match                           ((t ())))
`(helm-grep-running                         ((t ())))
`(helm-header                               ((t ())))
`(helm-header-line-left-margin              ((t ())))
`(helm-history-deleted                      ((t ())))
`(helm-history-remote                       ((t ())))
`(helm-lisp-completion-info                 ((t ())))
`(helm-lisp-show-completion                 ((t ())))
`(helm-locate-finish                        ((t ())))
`(helm-match                                ((t ())))
`(helm-match-item                           ((t ())))
`(helm-moccur-buffer                        ((t ())))
`(helm-resume-need-update                   ((t ())))
`(helm-selection                            ((t ())))
`(helm-selection-line                       ((t ())))
`(helm-separator                            ((t ())))
`(helm-source-header                        ((t ())))
`(helm-swoop-line-number-face               ((t ())))
`(helm-swoop-target-line-block-face         ((t ())))
`(helm-swoop-target-line-face               ((t ())))
`(helm-swoop-target-word-face               ((t ())))
`(helm-visible-mark                         ((t ())))
`(help-argument-name                        ((t ())))
`(help-key-binding                          ((t ())))
`(hi-aquamarine                             ((t ())))
`(hi-black-b                                ((t ())))
`(hi-black-hb                               ((t ())))
`(hi-blue                                   ((t ())))
`(hi-blue-b                                 ((t ())))
`(hi-green                                  ((t ())))
`(hi-green-b                                ((t ())))
`(hi-pink                                   ((t ())))
`(hi-red-b                                  ((t ())))
`(hi-salmon                                 ((t ())))
`(hi-yellow                                 ((t ())))
`(highlight                                 ((t ())))
`(hl-line                                   ((t ())))
`(hl-paren-face                             ((t ())))
`(holiday                                   ((t ())))
`(ibuffer-locked-buffer                     ((t ())))
`(icon-button                               ((t ())))
`(ido-first-match                           ((t ())))
`(ido-only-match                            ((t ())))
`(ido-subdir                                ((t ())))
`(image-dired-thumb-flagged                 ((t ())))
`(image-dired-thumb-header-file-name        ((t ())))
`(image-dired-thumb-header-file-size        ((t ())))
`(image-dired-thumb-mark                    ((t ())))
`(info-header-node                          ((t ())))
`(info-index-match                          ((t ())))
`(info-menu-header                          ((t ())))
`(info-menu-star                            ((t ())))
`(info-node                                 ((t ())))
`(info-title-1                              ((t ())))
`(info-title-2                              ((t ())))
`(info-title-3                              ((t ())))
`(info-title-4                              ((t ())))
`(isearch                                   ((t ())))
`(isearch-fail                              ((t ())))
`(isearch-group-1                           ((t ())))
`(isearch-group-2                           ((t ())))
`(italic                                    ((t ())))
`(ivy-current-match                         ((t ())))
`(ivy-minibuffer-match-face-1               ((t ())))
`(ivy-minibuffer-match-face-2               ((t ())))
`(ivy-minibuffer-match-face-3               ((t ())))
`(ivy-minibuffer-match-face-4               ((t ())))
`(ivy-posframe                              ((t ())))
`(ivy-posframe-border                       ((t ())))
`(ivy-remote                                ((t ())))
`(jdee-bug-breakpoint-cursor                ((t ())))
`(jdee-db-active-breakpoint-face            ((t ())))
`(jdee-db-requested-breakpoint-face         ((t ())))
`(jdee-db-spec-breakpoint-face              ((t ())))
`(jdee-font-lock-api-face                   ((t ())))
`(jdee-font-lock-code-face                  ((t ())))
`(jdee-font-lock-constant-face              ((t ())))
`(jdee-font-lock-constructor-face           ((t ())))
`(jdee-font-lock-doc-tag-face               ((t ())))
`(jdee-font-lock-link-face                  ((t ())))
`(jdee-font-lock-modifier-face              ((t ())))
`(jdee-font-lock-number-face                ((t ())))
`(jdee-font-lock-operator-fac               ((t ())))
`(jdee-font-lock-package-face               ((t ())))
`(jdee-font-lock-pre-face                   ((t ())))
`(jdee-font-lock-private-face               ((t ())))
`(jdee-font-lock-public-face                ((t ())))
`(jdee-font-lock-variable-face              ((t ())))
`(jit-spell-misspelling                     ((t ())))
`(js2-error                                 ((t ())))
`(js2-external-variable                     ((t ())))
`(js2-function-call                         ((t ())))
`(js2-function-param                        ((t ())))
`(js2-instance-member                       ((t ())))
`(js2-jsdoc-html-tag-delimiter              ((t ())))
`(js2-jsdoc-html-tag-name                   ((t ())))
`(js2-jsdoc-tag                             ((t ())))
`(js2-jsdoc-type                            ((t ())))
`(js2-jsdoc-value                           ((t ())))
`(js2-object-property                       ((t ())))
`(js2-private-function-call                 ((t ())))
`(js2-private-member                        ((t ())))
`(js2-warning                               ((t ())))
`(js3-error-face                            ((t ())))
`(js3-external-variable-face                ((t ())))
`(js3-function-param-face                   ((t ())))
`(js3-instance-member-face                  ((t ())))
`(js3-jsdoc-html-tag-delimiter-face         ((t ())))
`(js3-jsdoc-html-tag-name-face              ((t ())))
`(js3-jsdoc-tag-face                        ((t ())))
`(js3-jsdoc-type-face                       ((t ())))
`(js3-jsdoc-value-face                      ((t ())))
`(js3-magic-paren-face                      ((t ())))
`(js3-private-function-call-face            ((t ())))
`(js3-private-member-face                   ((t ())))
`(js3-warning-face                          ((t ())))
`(keycast-command                           ((t ())))
`(keycast-key                               ((t ())))
`(lazy-highlight                            ((t ())))
`(line-number                               ((t (:foreground ,sky0))))
`(line-number-current-line                  ((t (:foreground ,sky0))))
`(line-number-major-tick                    ((t ())))
`(line-number-minor-tick                    ((t ())))
`(link                                      ((t ())))
`(link-visited                              ((t ())))
`(linum                                     ((t ())))
`(linum-relative-current-face               ((t ())))
`(log-edit-header                           ((t ())))
`(log-edit-headers-separator                ((t ())))
`(log-edit-summary                          ((t ())))
`(log-edit-unknown-header                   ((t ())))
`(log-view-commit-body                      ((t ())))
`(log-view-file                             ((t ())))
`(log-view-message                          ((t ())))
`(magit-bisect-bad                          ((t ())))
`(magit-bisect-good                         ((t ())))
`(magit-bisect-skip                         ((t ())))
`(magit-blame-date                          ((t ())))
`(magit-blame-dimmed                        ((t ())))
`(magit-blame-hash                          ((t ())))
`(magit-blame-highlight                     ((t ())))
`(magit-blame-name                          ((t ())))
`(magit-blame-summary                       ((t ())))
`(magit-branch                              ((t ())))
`(magit-branch-local                        ((t ())))
`(magit-branch-remote                       ((t ())))
`(magit-branch-upstream                     ((t ())))
`(magit-branch-warning                      ((t ())))
`(magit-cherry-equivalent                   ((t ())))
`(magit-cherry-unmatched                    ((t ())))
`(magit-diff-added                          ((t ())))
`(magit-diff-added-highlight                ((t ())))
`(magit-diff-base                           ((t ())))
`(magit-diff-base-highlight                 ((t ())))
`(magit-diff-context                        ((t ())))
`(magit-diff-context-highlight              ((t ())))
`(magit-diff-file-header                    ((t ())))
`(magit-diff-file-heading                   ((t ())))
`(magit-diff-file-heading-highlight         ((t ())))
`(magit-diff-file-heading-selection         ((t ())))
`(magit-diff-hunk-heading                   ((t ())))
`(magit-diff-hunk-heading-highlight         ((t ())))
`(magit-diff-hunk-heading-selection         ((t ())))
`(magit-diff-hunk-region                    ((t ())))
`(magit-diff-lines-boundary                 ((t ())))
`(magit-diff-lines-heading                  ((t ())))
`(magit-diff-removed                        ((t ())))
`(magit-diff-removed-highlight              ((t ())))
`(magit-diffstat-added                      ((t ())))
`(magit-diffstat-removed                    ((t ())))
`(magit-dimmed                              ((t ())))
`(magit-filename                            ((t ())))
`(magit-hash                                ((t ())))
`(magit-head                                ((t ())))
`(magit-header                              ((t ())))
`(magit-header-line                         ((t ())))
`(magit-header-line-key                     ((t ())))
`(magit-header-line-log-select              ((t ())))
`(magit-hunk-heading                        ((t ())))
`(magit-hunk-heading-highlight              ((t ())))
`(magit-item-highlight                      ((t ())))
`(magit-keyword                             ((t ())))
`(magit-keyword-squash                      ((t ())))
`(magit-log-author                          ((t ())))
`(magit-log-date                            ((t ())))
`(magit-log-graph                           ((t ())))
`(magit-mode-line-process                   ((t ())))
`(magit-mode-line-process-error             ((t ())))
`(magit-process-ng                          ((t ())))
`(magit-process-ok                          ((t ())))
`(magit-reflog-amend                        ((t ())))
`(magit-reflog-checkout                     ((t ())))
`(magit-reflog-cherry-pick                  ((t ())))
`(magit-reflog-commit                       ((t ())))
`(magit-reflog-merge                        ((t ())))
`(magit-reflog-other                        ((t ())))
`(magit-reflog-rebase                       ((t ())))
`(magit-reflog-remote                       ((t ())))
`(magit-reflog-reset                        ((t ())))
`(magit-refname                             ((t ())))
`(magit-refname-pullreq                     ((t ())))
`(magit-refname-stash                       ((t ())))
`(magit-refname-wip                         ((t ())))
`(magit-section                             ((t ())))
`(magit-section-heading                     ((t ())))
`(magit-section-heading-selection           ((t ())))
`(magit-section-highlight                   ((t ())))
`(magit-selection                           ((t ())))
`(magit-selection-highlight                 ((t ())))
`(magit-selection-title                     ((t ())))
`(magit-sequence-done                       ((t ())))
`(magit-sequence-drop                       ((t ())))
`(magit-sequence-exec                       ((t ())))
`(magit-sequence-head                       ((t ())))
`(magit-sequence-onto                       ((t ())))
`(magit-sequence-part                       ((t ())))
`(magit-sequence-pick                       ((t ())))
`(magit-sequence-stop                       ((t ())))
`(magit-signature-bad                       ((t ())))
`(magit-signature-error                     ((t ())))
`(magit-signature-expired                   ((t ())))
`(magit-signature-expired-key               ((t ())))
`(magit-signature-good                      ((t ())))
`(magit-signature-revoked                   ((t ())))
`(magit-signature-untrusted                 ((t ())))
`(magit-tag                                 ((t ())))
`(marginalia-archive                        ((t ())))
`(marginalia-char                           ((t ())))
`(marginalia-date                           ((t ())))
`(marginalia-documentation                  ((t ())))
`(marginalia-file-name                      ((t ())))
`(marginalia-file-owner                     ((t ())))
`(marginalia-file-priv-dir                  ((t ())))
`(marginalia-file-priv-exec                 ((t ())))
`(marginalia-file-priv-link                 ((t ())))
`(marginalia-file-priv-no                   ((t ())))
`(marginalia-file-priv-other                ((t ())))
`(marginalia-file-priv-rare                 ((t ())))
`(marginalia-file-priv-read                 ((t ())))
`(marginalia-file-priv-write                ((t ())))
`(marginalia-function                       ((t ())))
`(marginalia-key                            ((t ())))
`(marginalia-lighter                        ((t ())))
`(marginalia-liqst                          ((t ())))
`(marginalia-mode                           ((t ())))
`(marginalia-modified                       ((t ())))
`(marginalia-null                           ((t ())))
`(marginalia-number                         ((t ())))
`(marginalia-size                           ((t ())))
`(marginalia-string                         ((t ())))
`(marginalia-symbol                         ((t ())))
`(marginalia-true                           ((t ())))
`(marginalia-type                           ((t ())))
`(marginalia-value                          ((t ())))
`(marginalia-version                        ((t ())))
`(markdown-blockquote-face                  ((t ())))
`(markdown-bold-face                        ((t ())))
`(markdown-code-face                        ((t ())))
`(markdown-gfm-checkbox-face                ((t ())))
`(markdown-header-delimiter-face            ((t ())))
`(markdown-header-face                      ((t ())))
`(markdown-header-face-1                    ((t ())))
`(markdown-header-face-2                    ((t ())))
`(markdown-header-face-3                    ((t ())))
`(markdown-header-face-4                    ((t ())))
`(markdown-header-face-5                    ((t ())))
`(markdown-header-face-6                    ((t ())))
`(markdown-highlighting-face                ((t ())))
`(markdown-inline-code-face                 ((t ())))
`(markdown-italic-face                      ((t ())))
`(markdown-language-keyword-face            ((t ())))
`(markdown-line-break-face                  ((t ())))
`(markdown-link-face                        ((t ())))
`(markdown-markup-face                      ((t ())))
`(markdown-metadata-key-face                ((t ())))
`(markdown-metadata-value-face              ((t ())))
`(markdown-missing-link-face                ((t ())))
`(markdown-pre-face                         ((t ())))
`(markdown-reference-face                   ((t ())))
`(markdown-table-face                       ((t ())))
`(markdown-url-face                         ((t ())))
`(match                                     ((t ())))
`(merlin-type-face                          ((t ())))
`(message-cited-text                        ((t ())))
`(message-cited-text-1                      ((t ())))
`(message-cited-text-2                      ((t ())))
`(message-cited-text-3                      ((t ())))
`(message-cited-text-4                      ((t ())))
`(message-header-cc                         ((t ())))
`(message-header-name                       ((t ())))
`(message-header-newsgroup                  ((t ())))
`(message-header-newsgroups                 ((t ())))
`(message-header-other                      ((t ())))
`(message-header-subject                    ((t ())))
`(message-header-to                         ((t ())))
`(message-header-xheader                    ((t ())))
`(message-mml                               ((t ())))
`(message-separator                         ((t ())))
`(minibuffer-prompt                         ((t ())))
`(mm-command-output                         ((t ())))
`(mode-line                                 ((t ())))
`(mode-line-active                          ((t (:background ,shade1))))
`(mode-line-buffer-id                       ((t ())))
`(mode-line-emphasis                        ((t ())))
`(mode-line-highlight                       ((t ())))
`(mode-line-inactive                        ((t ())))
`(mu4e-attach-number-face                   ((t ())))
`(mu4e-cited-1-face                         ((t ())))
`(mu4e-cited-2-face                         ((t ())))
`(mu4e-cited-3-face                         ((t ())))
`(mu4e-cited-4-face                         ((t ())))
`(mu4e-cited-5-face                         ((t ())))
`(mu4e-cited-6-face                         ((t ())))
`(mu4e-cited-7-face                         ((t ())))
`(mu4e-compose-header-face                  ((t ())))
`(mu4e-compose-separator-face               ((t ())))
`(mu4e-contact-face                         ((t ())))
`(mu4e-context-face                         ((t ())))
`(mu4e-draft-face                           ((t ())))
`(mu4e-flagged-face                         ((t ())))
`(mu4e-footer-face                          ((t ())))
`(mu4e-forwarded-face                       ((t ())))
`(mu4e-header-face                          ((t ())))
`(mu4e-header-highlight-face                ((t ())))
`(mu4e-header-key-face                      ((t ())))
`(mu4e-header-marks-face                    ((t ())))
`(mu4e-header-title-face                    ((t ())))
`(mu4e-header-value-face                    ((t ())))
`(mu4e-highlight-face                       ((t ())))
`(mu4e-link-face                            ((t ())))
`(mu4e-modeline-face                        ((t ())))
`(mu4e-moved-face                           ((t ())))
`(mu4e-ok-face                              ((t ())))
`(mu4e-region-code                          ((t ())))
`(mu4e-related-face                         ((t ())))
`(mu4e-replied-face                         ((t ())))
`(mu4e-special-header-value-face            ((t ())))
`(mu4e-system-face                          ((t ())))
`(mu4e-title-face                           ((t ())))
`(mu4e-trashed-face                         ((t ())))
`(mu4e-unread-face                          ((t ())))
`(mu4e-url-number-face                      ((t ())))
`(mu4e-view-body-face                       ((t ())))
`(mu4e-warning-face                         ((t ())))
`(neo-banner-face                           ((t ())))
`(neo-button-face                           ((t ())))
`(neo-dir-link-face                         ((t ())))
`(neo-expand-btn-face                       ((t ())))
`(neo-file-link-face                        ((t ())))
`(neo-header-face                           ((t ())))
`(neo-root-dir-face                         ((t ())))
`(neo-vc-added-face                         ((t ())))
`(neo-vc-conflict-face                      ((t ())))
`(neo-vc-default-face                       ((t ())))
`(neo-vc-edited-face                        ((t ())))
`(neo-vc-ignored-face                       ((t ())))
`(neo-vc-missing-face                       ((t ())))
`(neo-vc-needs-merge-face                   ((t ())))
`(neo-vc-needs-update-face                  ((t ())))
`(neo-vc-removed-face                       ((t ())))
`(neo-vc-unlocked-changes-face              ((t ())))
`(neo-vc-up-to-date-face                    ((t ())))
`(neo-vc-user-face                          ((t ())))
`(nerd-icons-blue                           ((t ())))
`(nerd-icons-blue-alt                       ((t ())))
`(nerd-icons-cyan                           ((t ())))
`(nerd-icons-cyan-alt                       ((t ())))
`(nerd-icons-dblue                          ((t ())))
`(nerd-icons-dcyan                          ((t ())))
`(nerd-icons-dgreen                         ((t ())))
`(nerd-icons-dired-dir-face                 ((t ())))
`(nerd-icons-dmaroon                        ((t ())))
`(nerd-icons-dorange                        ((t ())))
`(nerd-icons-dpink                          ((t ())))
`(nerd-icons-dpurple                        ((t ())))
`(nerd-icons-dred                           ((t ())))
`(nerd-icons-dsilver                        ((t ())))
`(nerd-icons-dyellow                        ((t ())))
`(nerd-icons-green                          ((t ())))
`(nerd-icons-ibuffer-dir-face               ((t ())))
`(nerd-icons-ibuffer-file-face              ((t ())))
`(nerd-icons-ibuffer-mode-face              ((t ())))
`(nerd-icons-ibuffer-size-face              ((t ())))
`(nerd-icons-lblue                          ((t ())))
`(nerd-icons-lcyan                          ((t ())))
`(nerd-icons-lgreen                         ((t ())))
`(nerd-icons-lmaroon                        ((t ())))
`(nerd-icons-lorange                        ((t ())))
`(nerd-icons-lpink                          ((t ())))
`(nerd-icons-lpurple                        ((t ())))
`(nerd-icons-lred                           ((t ())))
`(nerd-icons-lsilver                        ((t ())))
`(nerd-icons-lyellow                        ((t ())))
`(nerd-icons-maroon                         ((t ())))
`(nerd-icons-orange                         ((t ())))
`(nerd-icons-pink                           ((t ())))
`(nerd-icons-purple                         ((t ())))
`(nerd-icons-purple-alt                     ((t ())))
`(nerd-icons-red                            ((t ())))
`(nerd-icons-red-alt                        ((t ())))
`(nerd-icons-silver                         ((t ())))
`(nerd-icons-yellow                         ((t ())))
`(next-error                                ((t ())))
`(nobreak-space                             ((t ())))
`(notmuch-crypto-decryption                 ((t ())))
`(notmuch-crypto-part-header                ((t ())))
`(notmuch-crypto-signature-bad              ((t ())))
`(notmuch-crypto-signature-good             ((t ())))
`(notmuch-crypto-signature-good-key         ((t ())))
`(notmuch-crypto-signature-unknown          ((t ())))
`(notmuch-jump-key                          ((t ())))
`(notmuch-message-summary-face              ((t ())))
`(notmuch-search-count                      ((t ())))
`(notmuch-search-date                       ((t ())))
`(notmuch-search-flagged-face               ((t ())))
`(notmuch-search-matching-authors           ((t ())))
`(notmuch-search-non-matching-authors       ((t ())))
`(notmuch-search-subject                    ((t ())))
`(notmuch-search-unread-face                ((t ())))
`(notmuch-tag-added                         ((t ())))
`(notmuch-tag-deleted                       ((t ())))
`(notmuch-tag-face                          ((t ())))
`(notmuch-tag-flagged                       ((t ())))
`(notmuch-tag-unread                        ((t ())))
`(notmuch-tree-match-author-face            ((t ())))
`(notmuch-tree-match-date-face              ((t ())))
`(notmuch-tree-match-face                   ((t ())))
`(notmuch-tree-match-tag-face               ((t ())))
`(notmuch-tree-no-match-date-face           ((t ())))
`(notmuch-tree-no-match-face                ((t ())))
`(notmuch-wash-cited-text                   ((t ())))
`(notmuch-wash-toggle-button                ((t ())))
`(olivetti-fringe                           ((t ())))
`(orderless-match-face-0                    ((t (:foreground ,red))))
`(orderless-match-face-1                    ((t (:foreground ,red))))
`(orderless-match-face-2                    ((t (:foreground ,red))))
`(orderless-match-face-3                    ((t (:foreground ,red))))
`(org-agenda-calendar-daterange             ((t ())))
`(org-agenda-calendar-event                 ((t ())))
`(org-agenda-calendar-sexp                  ((t ())))
`(org-agenda-clocking                       ((t ())))
`(org-agenda-column-dateline                ((t ())))
`(org-agenda-current-time                   ((t ())))
`(org-agenda-date                           ((t ())))
`(org-agenda-date-today                     ((t ())))
`(org-agenda-date-weekend                   ((t ())))
`(org-agenda-date-weekend-today             ((t ())))
`(org-agenda-diary                          ((t ())))
`(org-agenda-dimmed-todo-face               ((t ())))
`(org-agenda-done                           ((t ())))
`(org-agenda-filter-category                ((t ())))
`(org-agenda-filter-effort                  ((t ())))
`(org-agenda-filter-regexp                  ((t ())))
`(org-agenda-filter-tags                    ((t ())))
`(org-agenda-restriction-lock               ((t ())))
`(org-agenda-structure                      ((t ())))
`(org-agenda-structure-filter               ((t ())))
`(org-agenda-structure-secondary            ((t ())))
`(org-archived                              ((t ())))
`(org-block                                 ((t ())))
`(org-block-background                      ((t ())))
`(org-block-begin-line                      ((t ())))
`(org-block-end-line                        ((t ())))
`(org-checkbox                              ((t ())))
`(org-checkbox-statistics-done              ((t ())))
`(org-checkbox-statistics-todo              ((t ())))
`(org-clock-overlay                         ((t ())))
`(org-code                                  ((t ())))
`(org-column                                ((t ())))
`(org-column-title                          ((t ())))
`(org-date                                  ((t ())))
`(org-date-selected                         ((t ())))
`(org-document-info                         ((t ())))
`(org-document-info-keyword                 ((t ())))
`(org-document-title                        ((t ())))
`(org-done                                  ((t ())))
`(org-drawer                                ((t ())))
`(org-ellipsis                              ((t ())))
`(org-footnote                              ((t ())))
`(org-formula                               ((t ())))
`(org-habit-alert-face                      ((t ())))
`(org-habit-alert-future-face               ((t ())))
`(org-habit-clear-face                      ((t ())))
`(org-habit-clear-future-face               ((t ())))
`(org-habit-overdue-face                    ((t ())))
`(org-habit-overdue-future-face             ((t ())))
`(org-habit-ready-face                      ((t ())))
`(org-habit-ready-future-face               ((t ())))
`(org-headline-done                         ((t ())))
`(org-headline-todo                         ((t ())))
`(org-hide                                  ((t ())))
`(org-imminent-deadline                     ((t ())))
`(org-indent                                ((t ())))
`(org-latex-and-related                     ((t ())))
`(org-level-1                               ((t ())))
`(org-level-2                               ((t ())))
`(org-level-3                               ((t ())))
`(org-level-4                               ((t ())))
`(org-level-5                               ((t ())))
`(org-level-6                               ((t ())))
`(org-level-7                               ((t ())))
`(org-level-8                               ((t ())))
`(org-link                                  ((t ())))
`(org-list-dt                               ((t ())))
`(org-macro                                 ((t ())))
`(org-meta-line                             ((t ())))
`(org-mode-line-clock                       ((t ())))
`(org-mode-line-clock-overrun               ((t ())))
`(org-modern-date-active                    ((t ())))
`(org-modern-date-inactive                  ((t ())))
`(org-modern-done                           ((t ())))
`(org-modern-priority                       ((t ())))
`(org-modern-statistics                     ((t ())))
`(org-modern-tag                            ((t ())))
`(org-modern-time-active                    ((t ())))
`(org-modern-time-inactive                  ((t ())))
`(org-modern-todo                           ((t ())))
`(org-priority                              ((t ())))
`(org-property-value                        ((t ())))
`(org-quote                                 ((t ())))
`(org-scheduled                             ((t ())))
`(org-scheduled-previously                  ((t ())))
`(org-scheduled-today                       ((t ())))
`(org-sexp-date                             ((t ())))
`(org-special-keyword                       ((t ())))
`(org-table                                 ((t ())))
`(org-table-header                          ((t ())))
`(org-tag                                   ((t ())))
`(org-tag-group                             ((t ())))
`(org-target                                ((t ())))
`(org-time-grid                             ((t ())))
`(org-todo                                  ((t ())))
`(org-upcoming-deadline                     ((t ())))
`(org-upcoming-distant-deadline             ((t ())))
`(org-verbatim                              ((t ())))
`(org-verse                                 ((t ())))
`(org-warning                               ((t ())))
`(outline-1                                 ((t ())))
`(outline-2                                 ((t ())))
`(outline-3                                 ((t ())))
`(outline-4                                 ((t ())))
`(outline-5                                 ((t ())))
`(outline-6                                 ((t ())))
`(outline-7                                 ((t ())))
`(outline-8                                 ((t ())))
`(outline-minor-0                           ((t ())))
`(package-description                       ((t ())))
`(package-help-section-name                 ((t ())))
`(package-name                              ((t ())))
`(package-status-avail-obso                 ((t ())))
`(package-status-available                  ((t ())))
`(package-status-built-in                   ((t ())))
`(package-status-dependency                 ((t ())))
`(package-status-disabled                   ((t ())))
`(package-status-external                   ((t ())))
`(package-status-from-source                ((t ())))
`(package-status-held                       ((t ())))
`(package-status-incompat                   ((t ())))
`(package-status-installed                  ((t ())))
`(package-status-new                        ((t ())))
`(package-status-unsigned                   ((t ())))
`(persp-selected-face                       ((t ())))
`(pgtk-im-0                                 ((t ())))
`(popup-tip-face                            ((t ())))
`(powerline-active0                         ((t ())))
`(powerline-active1                         ((t ())))
`(powerline-active2                         ((t ())))
`(powerline-evil-base-face                  ((t ())))
`(powerline-evil-insert-face                ((t ())))
`(powerline-evil-normal-face                ((t ())))
`(powerline-evil-replace-face               ((t ())))
`(powerline-evil-visual-face                ((t ())))
`(powerline-inactive0                       ((t ())))
`(powerline-inactive1                       ((t ())))
`(powerline-inactive2                       ((t ())))
`(proof-declaration-name-face               ((t ())))
`(proof-error-face                          ((t ())))
`(proof-locked-face                         ((t ())))
`(proof-queue-face                          ((t ())))
`(proof-tacticals-name-face                 ((t ())))
`(proof-tactics-name-face                   ((t ())))
`(proof-warning-face                        ((t ())))
`(query-replace                             ((t ())))
`(rainbow-delimiters-base-error-face        ((t ())))
`(rainbow-delimiters-base-face              ((t ())))
`(rainbow-delimiters-depth-1-face           ((t ())))
`(rainbow-delimiters-depth-2-face           ((t ())))
`(rainbow-delimiters-depth-3-face           ((t ())))
`(rainbow-delimiters-depth-4-face           ((t ())))
`(rainbow-delimiters-depth-5-face           ((t ())))
`(rainbow-delimiters-depth-6-face           ((t ())))
`(rainbow-delimiters-depth-7-face           ((t ())))
`(rainbow-delimiters-depth-8-face           ((t ())))
`(rainbow-delimiters-depth-9-face           ((t ())))
`(rainbow-delimiters-mismatched-face        ((t ())))
`(rainbow-delimiters-unmatched-face         ((t ())))
`(rcirc-bright-nick                         ((t ())))
`(rcirc-dim-nick                            ((t ())))
`(rcirc-monospace-text                      ((t ())))
`(rcirc-my-nick                             ((t ())))
`(rcirc-nick-in-message                     ((t ())))
`(rcirc-nick-in-message-full-line           ((t ())))
`(rcirc-other-nick                          ((t ())))
`(rcirc-prompt                              ((t ())))
`(rcirc-server                              ((t ())))
`(rcirc-timestamp                           ((t ())))
`(rcirc-track-keyword                       ((t ())))
`(rcirc-track-nick                          ((t ())))
`(rcirc-url                                 ((t ())))
`(read-multiple-choice-face                 ((t ())))
`(reb-match-0                               ((t ())))
`(reb-match-1                               ((t ())))
`(reb-match-2                               ((t ())))
`(reb-match-3                               ((t ())))
`(reb-regexp-grouping-backslash             ((t ())))
`(reb-regexp-grouping-construct             ((t ())))
`(rectangle-preview                         ((t ())))
`(recursion-indicator-general               ((t ())))
`(recursion-indicator-minibuffer            ((t ())))
`(region                                    ((t (:background ,shade1))))
`(rst-level-1                               ((t ())))
`(rst-level-2                               ((t ())))
`(rst-level-3                               ((t ())))
`(rst-level-4                               ((t ())))
`(rst-level-5                               ((t ())))
`(rst-level-6                               ((t ())))
`(ruler-mode-column-number                  ((t ())))
`(ruler-mode-comment-column                 ((t ())))
`(ruler-mode-current-column                 ((t ())))
`(ruler-mode-default                        ((t ())))
`(ruler-mode-fill-column                    ((t ())))
`(ruler-mode-fringes                        ((t ())))
`(ruler-mode-goal-column                    ((t ())))
`(ruler-mode-margins                        ((t ())))
`(ruler-mode-pad                            ((t ())))
`(ruler-mode-tab-stop                       ((t ())))
`(scroll-bar                                ((t ())))
`(secondary-selection                       ((t ())))
`(sh-heredoc                                ((t ())))
`(sh-quoted-exec                            ((t ())))
`(shadow                                    ((t (:foreground ,sky0))))
`(show-paren-match                          ((t ())))
`(show-paren-match-expression               ((t ())))
`(show-paren-match-face                     ((t ())))
`(show-paren-mismatch                       ((t ())))
`(show-paren-mismatch-face                  ((t ())))
`(shr-code                                  ((t ())))
`(shr-h1                                    ((t ())))
`(shr-h2                                    ((t ())))
`(shr-h3                                    ((t ())))
`(shr-h4                                    ((t ())))
`(shr-h5                                    ((t ())))
`(shr-h6                                    ((t ())))
`(shr-mark                                  ((t ())))
`(shr-selected-link                         ((t ())))
`(smerge-base                               ((t ())))
`(smerge-lower                              ((t ())))
`(smerge-markers                            ((t ())))
`(smerge-refined-added                      ((t ())))
`(smerge-refined-changed                    ((t ())))
`(smerge-refined-removed                    ((t ())))
`(smerge-upper                              ((t ())))
`(success                                   ((t ())))
`(tab-bar                                   ((t ())))
`(tab-bar-tab-inactive                      ((t ())))
`(tab-line                                  ((t ())))
`(tab-line-close-highlight                  ((t ())))
`(tab-line-highlight                        ((t ())))
`(tab-line-tab-current                      ((t ())))
`(tab-line-tab-inactive                     ((t ())))
`(tab-line-tab-inactive-alternate           ((t ())))
`(tab-line-tab-modified                     ((t ())))
`(tempel-default                            ((t ())))
`(tempel-field                              ((t ())))
`(tempel-form                               ((t ())))
`(term                                      ((t ())))
`(term-bold                                 ((t ())))
`(term-color-black                          ((t ())))
`(term-color-blue                           ((t ())))
`(term-color-cyan                           ((t ())))
`(term-color-green                          ((t ())))
`(term-color-magenta                        ((t ())))
`(term-color-red                            ((t ())))
`(term-color-white                          ((t ())))
`(term-color-yellow                         ((t ())))
`(term-underline                            ((t ())))
`(tex-verbatim                              ((t ())))
`(texinfo-heading                           ((t ())))
`(textsec-suspicious                        ((t ())))
`(tool-bar                                  ((t ())))
`(tooltip                                   ((t ())))
`(trailing-whitespace                       ((t ())))
`(transient-active-infix                    ((t ())))
`(transient-amaranth                        ((t ())))
`(transient-blue                            ((t ())))
`(transient-disabled-suffix                 ((t ())))
`(transient-enabled-suffix                  ((t ())))
`(transient-heading                         ((t ())))
`(transient-inactive-argument               ((t ())))
`(transient-inactive-value                  ((t ())))
`(transient-key                             ((t ())))
`(transient-mismatched-key                  ((t ())))
`(transient-nonstandard-key                 ((t ())))
`(transient-pink                            ((t ())))
`(transient-purple                          ((t ())))
`(transient-red                             ((t ())))
`(transient-teal                            ((t ())))
`(transient-unreachable                     ((t ())))
`(transient-unreachable-key                 ((t ())))
`(transient-value                           ((t ())))
`(trashed-restored                          ((t ())))
`(tree-sitter-hl-face:attribute             ((t ())))
`(tree-sitter-hl-face:constant.builtin      ((t ())))
`(tree-sitter-hl-face:escape                ((t ())))
`(tree-sitter-hl-face:function              ((t ())))
`(tree-sitter-hl-face:function.call         ((t ())))
`(tree-sitter-hl-face:label                 ((t ())))
`(tree-sitter-hl-face:method.call           ((t ())))
`(tree-sitter-hl-face:operator              ((t ())))
`(tree-sitter-hl-face:property              ((t ())))
`(tree-sitter-hl-face:property.definition   ((t ())))
`(tree-sitter-hl-face:punctuation           ((t ())))
`(tree-sitter-hl-face:punctuation.bracket   ((t ())))
`(tree-sitter-hl-face:punctuation.delimiter ((t ())))
`(tree-sitter-hl-face:punctuation.special   ((t ())))
`(tree-sitter-hl-face:string.special        ((t ())))
`(tree-sitter-hl-face:tag                   ((t ())))
`(tree-sitter-hl-face:type.argument         ((t ())))
`(tty-menu-disabled-face                    ((t ())))
`(tty-menu-enabled-face                     ((t ())))
`(tty-menu-selected-face                    ((t ())))
`(tuareg-font-double-colon-face             ((t ())))
`(tuareg-font-lock-governing-face           ((t ())))
`(tuareg-font-lock-operator-face            ((t ())))
`(underline                                 ((t ())))
`(undo-tree-visualizer-current-face         ((t ())))
`(undo-tree-visualizer-default-face         ((t ())))
`(undo-tree-visualizer-register-face        ((t ())))
`(undo-tree-visualizer-unmodified-face      ((t ())))
`(variable-pitch                            ((t ())))
`(vc-conflict-state                         ((t ())))
`(vc-dir-directory                          ((t ())))
`(vc-dir-file                               ((t ())))
`(vc-dir-header                             ((t ())))
`(vc-dir-header-value                       ((t ())))
`(vc-dir-mark-indicator                     ((t ())))
`(vc-dir-status-edited                      ((t ())))
`(vc-dir-status-ignored                     ((t ())))
`(vc-dir-status-up-to-date                  ((t ())))
`(vc-dir-status-warning                     ((t ())))
`(vc-edited-state                           ((t ())))
`(vc-git-log-edit-summary-max-warning       ((t ())))
`(vc-git-log-edit-summary-target-warning    ((t ())))
`(vc-locally-added-state                    ((t ())))
`(vc-locked-state                           ((t ())))
`(vc-missing-state                          ((t ())))
`(vc-needs-update-state                     ((t ())))
`(vc-removed-state                          ((t ())))
`(vc-state-base                             ((t ())))
`(vc-up-to-date-state                       ((t ())))
`(vertical-border                           ((t ())))
`(vertico-current                           ((t (:background ,shade1))))
`(vertico-group-separator                   ((t ())))
`(vertico-group-title                       ((t ())))
`(vertico-multiline                         ((t ())))
`(vundo-default                             ((t ())))
`(vundo-highlight                           ((t ())))
`(vundo-last-saved                          ((t ())))
`(vundo-saved                               ((t ())))
`(warning                                   ((t ())))
`(web-mode-attr-tag-custom-face             ((t ())))
`(web-mode-builtin-face                     ((t ())))
`(web-mode-comment-face                     ((t ())))
`(web-mode-comment-keyword-face             ((t ())))
`(web-mode-constant-face                    ((t ())))
`(web-mode-css-at-rule-face                 ((t ())))
`(web-mode-css-function-face                ((t ())))
`(web-mode-css-property-name-face           ((t ())))
`(web-mode-css-pseudo-class-face            ((t ())))
`(web-mode-css-selector-face                ((t ())))
`(web-mode-css-string-face                  ((t ())))
`(web-mode-doctype-face                     ((t ())))
`(web-mode-function-call-face               ((t ())))
`(web-mode-function-name-face               ((t ())))
`(web-mode-html-attr-equal-face             ((t ())))
`(web-mode-html-attr-name-face              ((t ())))
`(web-mode-html-attr-value-face             ((t ())))
`(web-mode-html-entity-face                 ((t ())))
`(web-mode-html-tag-bracket-face            ((t ())))
`(web-mode-html-tag-custom-face             ((t ())))
`(web-mode-html-tag-face                    ((t ())))
`(web-mode-html-tag-namespaced-face         ((t ())))
`(web-mode-json-key-face                    ((t ())))
`(web-mode-json-string-face                 ((t ())))
`(web-mode-keyword-face                     ((t ())))
`(web-mode-preprocessor-face                ((t ())))
`(web-mode-string-face                      ((t ())))
`(web-mode-symbol-face                      ((t ())))
`(web-mode-type-face                        ((t ())))
`(web-mode-variable-name-face               ((t ())))
`(web-mode-warning-face                     ((t ())))
`(wgrep-delete-face                         ((t ())))
`(wgrep-done-face                           ((t ())))
`(wgrep-face                                ((t ())))
`(wgrep-file-face                           ((t ())))
`(wgrep-reject-face                         ((t ())))
`(which-func                                ((t ())))
`(which-key-command-description-face        ((t ())))
`(which-key-group-description-face          ((t ())))
`(which-key-highlighted-command-face        ((t ())))
`(which-key-key-face                        ((t ())))
`(which-key-local-map-description-face      ((t ())))
`(which-key-note-face                       ((t ())))
`(which-key-separator-face                  ((t ())))
`(which-key-special-key-face                ((t ())))
`(whitespace-big-indent                     ((t ())))
`(whitespace-empty                          ((t ())))
`(whitespace-hspace                         ((t ())))
`(whitespace-indentation                    ((t ())))
`(whitespace-line                           ((t ())))
`(whitespace-newline                        ((t ())))
`(whitespace-space                          ((t ())))
`(whitespace-space-after-tab                ((t ())))
`(whitespace-space-before-tab               ((t ())))
`(whitespace-tab                            ((t (:background ,shade1))))
`(whitespace-trailing                       ((t (:background ,red))))
`(widget-button                             ((t ())))
`(widget-button-pressed                     ((t ())))
`(widget-documentation                      ((t ())))
`(widget-field                              ((t ())))
`(widget-inactive                           ((t ())))
`(widget-single-line-field                  ((t ())))
`(window-divider                            ((t ())))
`(window-divider-first-pixel                ((t ())))
`(window-divider-last-pixel                 ((t ())))
`(woman-addition                            ((t ())))
`(woman-bold                                ((t ())))
`(woman-italic                              ((t ())))
`(woman-unknown                             ((t ())))
`(writegood-duplicates-face                 ((t ())))
`(writegood-passive-voice-face              ((t ())))
`(writegood-weasels-face                    ((t ())))

;; (list 'eldoc-highlight-function-argument `((,c :inherit warning :background ,bg-warning)))
;; (list 'transient-argument `((,c :inherit warning :background ,bg-warning)))

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
)
)

(provide-theme 'penumbra)
#+end_src

#+begin_src emacs-lisp
(load-theme 'penumbra t)
#+end_src

** minions

#+begin_src emacs-lisp
(setq minions-mode-line-lighter "")
(minions-mode 1)
#+end_src

** COMMENT awesome-tray

#+begin_src emacs-lisp
;; (setq awesome-tray-mode-line-height 0)

;; (setq awesome-tray-second-line t)

(require 'awesome-tray)
(awesome-tray-mode 1)
#+end_src

** COMMENT doom-modeline

#+begin_src emacs-lisp
(require 'doom-modeline)
(doom-modeline-mode 1)
#+end_src

* package_basic

** sudo-edit

#+begin_src emacs-lisp
(require 'sudo-edit)
#+end_src

** undo-fu

#+begin_src emacs-lisp
(setq undo-fu-ignore-keyboard-quit t)
#+end_src

** xclip

copying from "emacsclient -c" (gui emacsclient) to "emacsclient -nw" (tui emacsclient) will freeze emacs

#+begin_src emacs-lisp
(xclip-mode 1)
;; copy between *terminal* emacs and x clipboard
#+end_src

** COMMENT clipetty

can't copy from outside and paste inside emacs

#+begin_src emacs-lisp
(require 'clipetty)
(global-clipetty-mode)

;; for st, see https://www.reddit.com/r/suckless/comments/1715wey/does_st_support_osc_52/
;; xclip vs clipetty, see https://www.reddit.com/r/emacs/comments/n7z6f6/emacs_cli_copypaste_how_to/
#+end_src

** fcitx

#+begin_src emacs-lisp
(setq fcitx-remote-command "fcitx5-remote")
(fcitx-aggressive-setup)
;; https://github.com/cute-jumper/fcitx.el/issues?q=fcitx5
;; https://kisaragi-hiu.com/why-fcitx5
#+end_src

** COMMENT uuidgen

#+begin_src emacs-lisp
(require 'uuidgen)
#+end_src

* package_evil

** evil

https://evil.readthedocs.io/en/latest/index.html

*** the initial state

#+begin_src emacs-lisp
(setq evil-default-state 'emacs)
;; http://bling.github.io/blog/2015/01/06/emacs-as-my-leader-1-year-later/

(with-eval-after-load 'evil
(evil-set-initial-state 'fundamental-mode 'normal)
(evil-set-initial-state 'text-mode 'normal)
(evil-set-initial-state 'prog-mode 'normal)
)

(setq evil-normal-state-modes   nil)
(setq evil-insert-state-modes   nil)
(setq evil-visual-state-modes   nil)
(setq evil-replace-state-modes  nil)
(setq evil-operator-state-modes nil)
(setq evil-motion-state-modes   nil)
(setq evil-emacs-state-modes    nil)
#+end_src

*** keybindings and other behaviour

#+begin_src emacs-lisp
;; (setq evil-want-C-i-jump nil)

(setq evil-want-C-u-delete t)
(setq evil-want-C-u-scroll t)
;; https://www.reddit.com/r/emacs/comments/9j34bf/evil_and_the_universal_argument/

(setq evil-want-C-w-in-emacs-state t)
(setq evil-want-Y-yank-to-eol t)
(setq evil-disable-insert-state-bindings t)
#+end_src

*** search

#+begin_src emacs-lisp
;; (setq evil-search-module 'isearch)
(setq evil-search-module 'evil-search)
#+end_src

*** search_isearch

#+begin_src emacs-lisp
;; (setq evil-flash-delay 0)
#+end_src

*** search_evil-search

#+begin_src emacs-lisp
;; (setq evil-ex-search-case 'smart)
;; (setq evil-ex-search-vim-style-regexp nil)
;; (setq evil-ex-search-interactive nil)
;; (setq evil-ex-search-incremental t)
(setq evil-ex-search-highlight-all nil)
;; (setq evil-ex-search-persistent-highlight nil)
#+end_src

*** indentation

#+begin_src emacs-lisp
(setq evil-shift-width 8)
#+end_src

*** cursor movement

#+begin_src emacs-lisp
(setq evil-move-cursor-back nil)
(setq evil-move-beyond-eol t)
(setq evil-v$-excludes-newline t)
(setq evil-cross-lines t)
(setq evil-start-of-line t)
#+end_src

*** cursor display

#+begin_src emacs-lisp
;; (setq evil-normal-state-cursor t)
;; (setq evil-insert-state-cursor t)
;; (setq evil-visual-state-cursor t)
;; (setq evil-replace-state-cursor t)
;; (setq evil-operator-state-cursor t)
;; (setq evil-motion-state-cursor t)
;; (setq evil-emacs-state-cursor t)

(let ((default 'box))
;; (let ((default '(box "#eceff4")))
(setq evil-normal-state-cursor   default)
(setq evil-insert-state-cursor   default)
(setq evil-visual-state-cursor   default)
(setq evil-replace-state-cursor  default)
(setq evil-operator-state-cursor default)
(setq evil-motion-state-cursor   default)
(setq evil-emacs-state-cursor    default)
)
#+end_src

*** miscellaneous

#+begin_src emacs-lisp
;; (setq evil-undo-system 'undo-redo)
(setq evil-undo-system 'undo-fu)
#+end_src

*** unmentioned evil settings

#+begin_src emacs-lisp
(setq evil-want-change-word-to-end nil)
(setq evil-want-minibuffer nil)

(setq evil-want-integration nil)
(setq evil-want-keybinding nil)
;; evil-want-keybinding: whether to load evil-keybindings.el, which provides a set of keybindings for other emacs modes (dired etc)

;; (setq evil-want-integration t)
;; (setq evil-want-keybinding nil)
;; these two variables are required by evil-collection (https://github.com/emacs-evil/evil-collection#installation)

;; (setq evil-overriding-maps t)
#+end_src

*** enable evil

#+begin_src emacs-lisp
(require 'evil)
;; some variables need to be set before evil is loaded, keymaps need to be set after evil is loaded, so put this line here

(evil-mode 1)
#+end_src

** COMMENT evil-collection

to override existing binding in evil-collection, bind the key after (evil-collection-init), see this [[https://github.com/emacs-evil/evil-collection/issues/214][issue]]

#+begin_src emacs-lisp
;; (setq evil-collection-mode-list '(
;; ibuffer
;; calendar
;; dired
;; (package-menu package)
;; ))

;; (setq evil-collection-setup-minibuffer t)
;; use (setq evil-want-minibuffer t) instead of (setq evil-collection-setup-minibuffer t)

(setq evil-collection-want-unimpaired-p nil)

(setq evil-collection-key-blacklist '(
"{"
"}"
"C-j"
"C-k"
))



(evil-collection-init)

;; (evil-collection-translate-key nil 'evil-normal-state-map
;; "a" "b"
;; )
#+end_src

** evil-anzu

#+begin_src emacs-lisp
(setq anzu-cons-mode-line-p nil)
;; https://github.com/emacsorphanage/anzu#anzu-cons-mode-line-pdefault-is-t
(setq global-mode-string '(:eval (anzu--update-mode-line)))
;; https://emacs.stackexchange.com/questions/13855/how-to-append-string-that-gets-updated-to-mode-line

(require 'evil-anzu)

;; (set-face-attribute 'anzu-mode-line nil :inherit 'mode-line)
;; (copy-face 'mode-line 'anzu-mode-line)

(global-anzu-mode 1)
#+end_src

** COMMENT evil-cleverparens

disable for now, because its "M-[" binding break terminal emacs, check:

[[https://emacs.stackexchange.com/questions/68703/m-causes-emacs-to-print-weird-possibly-escape-sequences]]

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)
#+end_src

** COMMENT evil-commentary

comment in org src block cause this error:
combine-change-calls: buffer-undo-list broken

#+begin_src emacs-lisp
(evil-commentary-mode 1)
#+end_src

** evil-nerd-commenter

#+begin_src emacs-lisp
;; (evilnc-default-hotkeys)

(require 'evil-nerd-commenter)
(define-key evil-normal-state-map "gc" 'evilnc-comment-operator)
(define-key evil-visual-state-map "gc" 'evilnc-comment-operator)
;; https://github.com/redguardtoo/evil-nerd-commenter/issues/15
#+end_src

** evil-lion

#+begin_src emacs-lisp
(evil-lion-mode)
#+end_src

** COMMENT evil-org

#+begin_src emacs-lisp
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(setq evil-org-key-theme '(navigation textobjects additional calendar))
(evil-org-set-key-theme)
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

** COMMENT evil-rsi

#+begin_src emacs-lisp
(evil-rsi-mode)
#+end_src

** evil-surround

#+begin_src emacs-lisp
(global-evil-surround-mode 1)
#+end_src

* package_completion

** COMMENT company

#+begin_src emacs-lisp
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 0)

(global-company-mode 1)
#+end_src

* package_org

** org

#+begin_src emacs-lisp
(setq org-startup-folded nil)

;; (setq org-adapt-indentation nil)
;; * level 1
;;   * level 2

;; (setq org-list-indent-offset 6)
;; - fruit
;;         - apple
;;         - banana
;; 8 - 2 = 6

(setq org-link-descriptive nil)

;; (setq org-edit-src-content-indentation 0)
(setq org-src-preserve-indentation t)
;; (setq org-src-preserve-indentation t) force (setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'current-window)

;; (setq org-property-format "%-10s %s")
;; (setq org-property-format "%-15s %s")
(setq org-property-format "%s %s")



(setq org-startup-with-inline-images t)

(setq org-image-actual-width (list 960))
;; https://stackoverflow.com/a/69339844/18034992

;; (setq org-cycle-inline-images-display t)
;; org-cycle-inline-images-display only affects the command org-cycle (bound to TAB by default)

;; https://orgmode.org/manual/Images.html



(setq org-startup-with-latex-preview t)

;; (setq org-preview-latex-default-process 'dvisvgm)
;; (setq org-preview-latex-process-alist
;; these settings are obsolete since org 9.7, see https://emacs-china.org/t/org-mode-latex-improved-latex-preview/23742



;; (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "CANC(c)" "|" "DONE(d)")))
;; https://orgmode.org/manual/Workflow-states.html

(setq org-agenda-files `(,(getenv "a_aj")))

(setq org-capture-templates `(
("a" "inbox" entry (file ,(concat (getenv "a_aj") "/inbox.org")) "* %i%?")
))

(setq org-refile-targets `(
;; (,(concat (getenv "a_aj") "/inbox.org") :maxlevel . 2)
(,(directory-files-recursively (getenv "a_aj") "\.org$") :maxlevel . 2)
))
;; (setq org-reverse-note-order t)
(setq org-refile-use-outline-path 'file)
;; https://emacs.stackexchange.com/questions/13353/how-to-use-org-refile-to-move-a-headline-to-a-file-as-a-toplevel-headline
(setq org-outline-path-complete-in-steps nil)
;; https://github.com/minad/vertico#org-refile
;; (setq org-refile-allow-creating-parent-nodes )
;; (setq org-log-refile )

;; (setq org-id-ts-format "%Y%m%dT%H%M%S.%6N")
(setq org-id-ts-format "%Y-%m-%d-%H%M%S-%6N")
(setq org-id-method 'ts)
#+end_src

** COMMENT org-tempo

org mode now bundle with =C-c C-,= (org-insert-structure-template), obsolete org-tempo

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** COMMENT valign

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'valign-mode)
#+end_src

** COMMENT org-gtd

#+begin_src emacs-lisp
(setq org-edna-use-inheritance t)
(org-edna-mode 1)
;; https://github.com/Trevoke/org-gtd.el/blob/master/doc/org-gtd.org#required-configuration-of-sub-packages



(setq org-gtd-update-ack "3.0.0")
(setq org-gtd-directory (getenv "a_aj"))
(setq org-gtd-capture-templates '(
("i" "" entry (file org-gtd-inbox-path) "* %i%?")
))

(require 'org-gtd)
#+end_src

** org-roam

#+begin_src emacs-lisp
;; https://www.orgroam.com/manual.html
;; https://github.com/org-roam/org-roam/issues/2031

;; (setq org-roam-directory (file-truename "~/org-roam"))
(setq org-roam-directory (getenv "a_ak"))

;; (setq org-roam-capture-templates '(
;; ("d" "default" plain "%?"
;;      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
;;                         "#+title: ${title}\n")
;;      :unnarrowed t)
;; ))
(setq org-roam-capture-templates '((
"d"
"default"
plain
"%?"
;; :target (file+head "%(uuidgen-1).org" "#+title: ${title}\n")
:target (file+head "${title}.org" "#+title: ${title}\n")
:unnarrowed t
)))

(setq org-roam-node-formatter "link")
;; https://github.com/org-roam/org-roam/issues/1892

;; (setq org-roam-dailies-directory "")

(org-roam-db-autosync-mode)

(defun org-title-to-file-name ()
  (interactive)
  (when (and
         (not (null (buffer-file-name)))
         (not (null (org-get-title)))
         )
    (let (
          (title (org-get-title))
          (name (file-name-sans-extension (file-name-nondirectory (buffer-file-name))))
          )
      (when (not (string= title name))
        (let (
              (old-file-name (file-name-nondirectory (buffer-file-name)))
              (new-file-name (concat title ".org"))
              )
          (rename-file old-file-name new-file-name)
          (find-file new-file-name)
          (kill-buffer old-file-name)
          (message "Renamed %s to %s." old-file-name new-file-name)
          )))))
(add-hook 'org-mode-hook 'org-title-to-file-name)
;; https://emacs.stackexchange.com/questions/54809/rename-org-buffers-to-orgs-title-instead-of-filename
#+end_src

** org-journal

#+begin_src emacs-lisp
(setq org-journal-dir (getenv "a_al"))
(setq org-journal-file-format "%F.txt")
(setq org-journal-date-prefix "#+title ")
(setq org-journal-date-format "%F")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "%F %a %H:%M%n")
(setq org-journal-hide-entries-p nil)

(require 'org-journal)
#+end_src

* package_dired

** dired

#+begin_src emacs-lisp
;; http://xahlee.info/emacs/emacs/file_management.html

(setq dired-listing-switches "-Ahv --group-directories-first -l")

;; (setq dired-kill-when-opening-new-dired-buffer t)
;; https://emacs-china.org/t/emacs-28-dired-kill-when-opening-new-dired-buffer/20655
#+end_src

** COMMENT dired-preview

#+begin_src emacs-lisp
(require 'dired-preview)

;; Default values for demo purposes
(setq dired-preview-delay 0.7)
(setq dired-preview-max-size (expt 2 20))
(setq dired-preview-ignored-extensions-regexp
      (concat "\\."
              "\\(mkv\\|webm\\|mp4\\|mp3\\|ogg\\|m4a"
              "\\|gz\\|zst\\|tar\\|xz\\|rar\\|zip"
              "\\|iso\\|epub\\|pdf\\)"))

;; Enable `dired-preview-mode' in a given Dired buffer or do it
;; globally:
(dired-preview-global-mode 1)
#+end_src

** COMMENT dirvish

#+begin_src emacs-lisp
(dirvish-override-dired-mode)
;; https://emacs-china.org/t/dirvish-dired/20189/60
#+end_src

* package_minibuffer

** vertico

#+begin_src emacs-lisp
(setq vertico-scroll-margin 0)
(setq vertico-count 10)
(setq vertico-resize nil)
(setq vertico-cycle t)

(vertico-mode)
#+end_src

** orderless

#+begin_src emacs-lisp
;; (require 'orderless)
(setq completion-styles '(orderless basic))
(setq completion-category-overrides '((file (styles basic partial-completion))))
#+end_src

** marginalia

#+begin_src emacs-lisp
;; (require 'marginalia)
(marginalia-mode)
#+end_src

** COMMENT consult

#+begin_src emacs-lisp
(global-set-key (kbd "") 'consult-line)
#+end_src

** COMMENT embark

#+begin_src emacs-lisp
(global-set-key (kbd "") 'embark-act)
#+end_src

* package_window

** COMMENT edwina

#+begin_src emacs-lisp
(require 'edwina)
(setq display-buffer-base-action '(display-buffer-below-selected))
(edwina-setup-dwm-keys)
(edwina-mode 1)
#+end_src

** popper

#+begin_src emacs-lisp
;; (setq popper-window-height 40)
(setq popper-display-control nil)

(require 'popper)

(setq popper-reference-buffers
      '("\\*Messages\\*"
        "Output\\*$"
        "\\*Async Shell Command\\*"
        help-mode
        compilation-mode))
(global-set-key (kbd "<f1>") 'popper-toggle)
(global-set-key (kbd "<f3>") 'popper-cycle)
(global-set-key (kbd "<f7>") 'popper-toggle-type)
(popper-mode +1)

;; for echo-area hints
(require 'popper-echo)
(popper-echo-mode +1)
#+end_src

** shackle

#+begin_src emacs-lisp
(setq shackle-default-rule '(:same t))
#+end_src

* package_misc

** COMMENT package_eaf

#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
(require 'eaf)
(require 'eaf-demo)

(require 'eaf-file-manager)
(require 'eaf-pdf-viewer)
(require 'eaf-browser)

;; (require 'eaf-evil)
#+end_src

* keybindings

** global

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-c")
(lambda () (interactive)
(let ((current-prefix-arg '(4)))
     (call-interactively #'save-buffers-kill-terminal))
))
;; https://emacs.stackexchange.com/questions/50672/how-to-save-all-modified-buffers-and-kill-emacs
;; https://emacs.stackexchange.com/questions/48753/how-to-bind-c-u-m-x-shell-to-c-c-s

(global-set-key (kbd "<f5>") 'universal-argument)
(define-key universal-argument-map (kbd "<f5>") 'universal-argument-more)
;; https://emacs.stackexchange.com/questions/58319/how-to-rebind-special-meaning-of-c-u-to-a-different-key
#+end_src

** evil

#+begin_src emacs-lisp
(evil-set-leader nil (kbd "SPC"))

(with-eval-after-load 'evil
  (defadvice forward-evil-paragraph (around default-values activate)
    (let ((paragraph-start (default-value 'paragraph-start))
          (paragraph-separate (default-value 'paragraph-separate)))
      ad-do-it)))
;; https://emacs.stackexchange.com/questions/38596/make-evil-paragraphs-behave-like-vim-paragraphs

;; (defun evil-aidan-scroll-line-to-1/4 ()
;; (interactive)
;; (recenter (/ (window-body-height) 4))
;; )
;; (defun evil-aidan-scroll-line-to-3/4 ()
;; (interactive)
;; (recenter (- (/ (window-body-height) 4)))
;; )



;; (with-eval-after-load 'evil-maps
(define-key evil-motion-state-map (kbd "SPC") nil)
;; (define-key evil-motion-state-map (kbd "RET") nil)
;; (define-key evil-motion-state-map (kbd "TAB") nil)
;; )
;; https://emacs.stackexchange.com/questions/46371/how-can-i-get-ret-to-follow-org-mode-links-when-using-evil-mode

(define-key evil-motion-state-map (kbd ";") 'evil-ex)
;; (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
;; https://stackoverflow.com/questions/34497696/swap-and-to-make-colon-commands-easier-to-type-in-emacs
;; https://emacs.stackexchange.com/questions/26450/how-to-remap-to-in-evil-mode



;; (define-key evil-normal-state-map (kbd "C-s") 'evil-scroll-line-down)
;; (define-key evil-normal-state-map (kbd "C-y") 'evil-scroll-line-up)
;; (define-key evil-normal-state-map (kbd "C-k") 'evil-aidan-scroll-line-to-1/4)
;; (define-key evil-normal-state-map (kbd "C-j") 'evil-aidan-scroll-line-to-3/4)
(define-key evil-normal-state-map (kbd "C-j") 'evil-scroll-line-to-top)
(define-key evil-normal-state-map (kbd "C-k") 'evil-scroll-line-to-bottom)
(define-key evil-normal-state-map (kbd "C-l") 'evil-scroll-line-to-center)

(define-key evil-normal-state-map (kbd "z i") 'evil-open-fold)
(define-key evil-normal-state-map (kbd "z o") 'evil-open-fold-rec)
;; (define-key evil-normal-state-map (kbd "z c") 'evil-close-fold)
;; (define-key evil-normal-state-map (kbd "z a") 'evil-toggle-fold)
;; (define-key evil-normal-state-map (kbd "z r") 'evil-open-folds)
;; (define-key evil-normal-state-map (kbd "z m") 'evil-close-folds)
;; https://github.com/emacs-evil/evil/blob/master/evil-maps.el

;; (define-key evil-normal-state-map (kbd "J") (kbd ":put SPC _"))
;; (define-key evil-normal-state-map (kbd "K") (kbd ":put! SPC _"))
;; (define-key evil-normal-state-map (kbd "J") (lambda () (interactive) (evil-ex-execute "put _")))
;; (define-key evil-normal-state-map (kbd "K") (lambda () (interactive) (evil-ex-execute "put! _")))
;; https://stackoverflow.com/questions/20438900/key-map-for-ex-command-in-emacs-evil-mode
;; (define-key evil-normal-state-map (kbd "J") 'evil-collection-unimpaired-insert-newline-below)
;; (define-key evil-normal-state-map (kbd "K") 'evil-collection-unimpaired-insert-newline-above)

;; (define-key evil-normal-state-map (kbd "J") (lambda ()
;; (interactive)
;; (end-of-line)
;; (insert "\n")
;; ))
;; (define-key evil-normal-state-map (kbd "K") (lambda ()
;; (interactive)
;; (beginning-of-line)
;; (save-excursion (insert "\n"))
;; ))

(define-key evil-normal-state-map (kbd "J")
            (lambda (count)
              (interactive "p")
              (dotimes (_ count)
                (end-of-line)
                (insert "\n")
                )))
(define-key evil-normal-state-map (kbd "K")
            (lambda (count)
              (interactive "p")
              (dotimes (_ count)
                (beginning-of-line)
                (save-excursion (insert "\n"))
                ;; https://emacs.stackexchange.com/questions/2120/how-to-insert-text-after-point
                )))



;; (define-key evil-insert-state-map (kbd "C-s") 'evil-scroll-line-down)
;; (define-key evil-insert-state-map (kbd "C-y") 'evil-scroll-line-up)
;; (define-key evil-insert-state-map (kbd "C-k") 'evil-aidan-scroll-line-to-1/4)
;; (define-key evil-insert-state-map (kbd "C-j") 'evil-aidan-scroll-line-to-3/4)
(define-key evil-insert-state-map (kbd "C-j") 'evil-scroll-line-to-top)
(define-key evil-insert-state-map (kbd "C-k") 'evil-scroll-line-to-bottom)
(define-key evil-insert-state-map (kbd "C-l") 'evil-scroll-line-to-center)

(define-key evil-insert-state-map (kbd "C-w") 'evil-delete-backward-word)
(define-key evil-insert-state-map (kbd "C-u") 'evil-delete-back-to-indentation)
(define-key evil-insert-state-map (kbd "C-p") 'evil-complete-previous)
(define-key evil-insert-state-map (kbd "C-n") 'evil-complete-next)
(define-key evil-insert-state-map (kbd "C-r") 'evil-paste-from-register)
(define-key evil-insert-state-map (kbd "C-o") 'evil-execute-in-normal-state)



(define-key evil-window-map (kbd ";") 'evil-ex)
#+end_src

** evil-replace-with-char

#+begin_src emacs-lisp
(require 'evil-replace-with-char)
(define-key evil-normal-state-map "gr" 'evil-operator-replace-with-char)
#+end_src

** evil-replace-with-register

#+begin_src emacs-lisp
(require 'evil-replace-with-register)
(setq evil-replace-with-register-key (kbd "gp"))
(evil-replace-with-register-install)
#+end_src

** outline

#+begin_example
outline mode logic:

       leaf
     /
node
     \
       node

so only 4 functions are needed:

show-leaf
hide-leaf
show-node
hide-node
#+end_example

#+begin_src emacs-lisp
;; visibility_local:
(evil-define-key 'normal outline-mode-map (kbd "z y") 'outline-show-entry)
(evil-define-key 'normal outline-mode-map (kbd "z u") 'outline-show-children)
(evil-define-key 'normal outline-mode-map (kbd "z j") 'outline-show-branches) ; also hide leaves
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-show-subtree)
(evil-define-key 'normal outline-mode-map (kbd "z x") 'outline-hide-entry)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-leaves)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-subtree)

;; visibility_global:
(evil-define-key 'normal outline-mode-map (kbd "z k") 'outline-show-only-headings)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-show-all)
(evil-define-key 'normal outline-mode-map (kbd "z f") 'outline-hide-other)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-body)
(evil-define-key 'normal outline-mode-map (kbd "z g") 'outline-hide-sublevels)
;; https://github.com/emacs-evil/evil-collection/blob/master/modes/outline/evil-collection-outline.el
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Visibility.html

;; motion:
(evil-define-key 'normal outline-mode-map (kbd "<down>") 'outline-next-visible-heading)
(evil-define-key 'normal outline-mode-map (kbd "<up>") 'outline-previous-visible-heading)
(evil-define-key 'normal outline-mode-map (kbd "<next>") 'outline-forward-same-level)
(evil-define-key 'normal outline-mode-map (kbd "<prior>") 'outline-backward-same-level)
(evil-define-key 'normal outline-mode-map (kbd "<left>") 'outline-up-heading)

;; edit:
(evil-define-key '(normal insert) outline-mode-map (kbd "M-j") 'outline-move-subtree-down)
(evil-define-key '(normal insert) outline-mode-map (kbd "M-k") 'outline-move-subtree-up)
(evil-define-key '(normal insert) outline-mode-map (kbd "M-h") 'outline-promote)
(evil-define-key '(normal insert) outline-mode-map (kbd "M-l") 'outline-demote)

(evil-define-key '(normal insert) outline-mode-map (kbd "M-RET") 'outline-insert-heading)
#+end_src

** org

#+begin_src emacs-lisp
;; (setq org-return-follows-link t)

(evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
(evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)
(evil-define-key '(normal insert) org-mode-map (kbd "M-<left>") 'org-shiftmetaleft)
(evil-define-key '(normal insert) org-mode-map (kbd "M-<right>") 'org-shiftmetaright)

;; (setq org-M-RET-may-split-line nil)
(evil-define-key '(normal insert) org-mode-map (kbd "M-RET") 'org-meta-return)


(global-set-key (kbd "C-c s") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
;; https://orgmode.org/manual/Activation.html



(evil-define-key 'normal 'global (kbd "<leader>ja") (lambda () (interactive) (org-capture nil "a")))
(evil-define-key 'normal 'global (kbd "<leader>jw") 'org-refile)
(evil-define-key 'normal 'global (kbd "<leader>jl") 'org-time-stamp)

(evil-define-key 'normal 'global (kbd "<leader>ka") 'org-id-get-create)

(evil-define-key 'normal 'global (kbd "<leader>l") 'calendar)
#+end_src

** COMMENT org-gtd

#+begin_src emacs-lisp
(global-set-key (kbd "C-c n c") #'org-gtd-capture)
(define-key org-gtd-clarify-map (kbd "RET") #'org-gtd-organize)
#+end_src

** org-roam

#+begin_src emacs-lisp
;; (defun convert-to-orgroam ()
;; (interactive)
;; (let ((new-file-name (concat (uuidgen-1) ".org")))
;; (rename-file buffer-file-name new-file-name)
;; (find-file new-file-name)
;; )
;; (goto-char (point-min))
;; (insert "\n\n")
;; (goto-char (point-min))
;; (org-id-get-create)
;; (beginning-of-line 4)
;; (insert "#+title: ")
;; )
(defun convert-to-orgroam ()
(interactive)
(goto-char (point-min))
(insert "\n\n")
(goto-char (point-min))
(org-id-get-create)
(beginning-of-line 4)
(insert (format "#+title: %s" (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))))
(goto-char (point-min))
)
(evil-define-key 'normal 'global (kbd "<leader>kl") 'convert-to-orgroam)
;; https://org-roam.discourse.group/t/convert-preexisting-org-note-to-org-roam-type/2680



(evil-define-key 'normal 'global (kbd "<leader>kf") 'org-roam-node-find)
(evil-define-key 'normal 'global (kbd "<leader>ki") 'org-roam-node-insert)
(evil-define-key 'normal 'global (kbd "<leader>kc") 'org-roam-capture)
(evil-define-key 'normal 'global (kbd "<leader>kb") 'org-roam-buffer-toggle)
(evil-define-key 'normal 'global (kbd "<leader>kg") 'org-roam-graph)



;; (global-set-key (kbd "C-c n h") #'org-roam-dailies-goto-yesterday)
;; (global-set-key (kbd "C-c n j") #'org-roam-dailies-goto-today)
;; (global-set-key (kbd "C-c n l") #'org-roam-dailies-goto-tomorrow)
;; (global-set-key (kbd "C-c n k") #'org-roam-dailies-goto-date)
#+end_src

** org-journal

#+begin_src emacs-lisp
(evil-define-key 'normal calendar-mode-map (kbd "a") 'org-journal-new-date-entry)
(evil-define-key 'normal calendar-mode-map (kbd "f") 'org-journal-read-entry)
(evil-define-key 'normal calendar-mode-map (kbd "d") 'org-journal-display-entry)
(evil-define-key 'normal calendar-mode-map (kbd "p") 'org-journal-previous-entry)
(evil-define-key 'normal calendar-mode-map (kbd "n") 'org-journal-next-entry)
(evil-define-key 'normal calendar-mode-map (kbd "m") 'org-journal-mark-entries)
#+end_src
