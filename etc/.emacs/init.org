#+property: header-args:emacs-lisp :tangle (concat (getenv "XDG_CONFIG_HOME") "/emacs/init.el")

#+begin_src emacs-lisp
#+end_src

* init.org -> init.el

#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle :append :local)))
;; run "org-babel-tangle" when saving any org buffer
;; manually: C-c C-v t
;; https://leanpub.com/lit-config/read#leanpub-auto-emacs-and-org-mode

(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (getenv "a_gi") "/.local/etc/.emacs/init.org"))
    (org-babel-tangle)
  )
)
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

* xresources

#+begin_src emacs-lisp
(setq inhibit-x-resources t)
#+end_src

* appearance

#+begin_src emacs-lisp
(menu-bar-mode -1)

(tool-bar-mode -1)

(scroll-bar-mode -1)

(setq display-line-numbers-type 'visual)
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users
(setq display-line-numbers-current-absolute nil)
;; so that the line number width will not change, current absolute line number can be found in mode line
(global-display-line-numbers-mode 1)

(setq mode-line-client "")
;; https://emacs.stackexchange.com/questions/4018/reduce-the-space-between-elements-in-modeline
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html#Mode-Line-Variables
;; (line-number-mode 1)
(setq column-number-indicator-zero-based nil)
(column-number-mode 1)

(setq echo-keystrokes 0.01)

(setq completions-format 'vertical)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(add-to-list 'default-frame-alist
             '(font . "monospace-15"))

;; (global-visual-line-mode 1)
(set-default 'truncate-lines t)
;; https://www.emacswiki.org/emacs/TruncateLines
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users

(setq whitespace-style '(face trailing tabs tab-mark))
(global-whitespace-mode 1)
;; http://xahlee.info/emacs/emacs/whitespace-mode.html

(setq show-paren-delay 0)
(show-paren-mode 1)

(blink-cursor-mode 0)
#+end_src

* scroll

#+begin_src emacs-lisp
;; vertical scrolling

;; (setq scroll-margin 0)
;; (setq scroll-step 0)
;; when point moves off the screen, move window this line to make point visible, if failed, center the point
(setq scroll-conservatively most-positive-fixnum)
;; when point moves off the screen, move window up to this line to make point visible, if failed, center the point
;; https://www.gnu.org/software/emacs/manual/html_node/efaq/Scrolling-only-one-line.html
;; (setq scroll-down-aggressively 0.5)
;; (setq scroll-up-aggressively 0.5)

;; horizontal scrolling
(setq hscroll-margin 0)
(setq hscroll-step 2)
;; there is no "hscroll-conservatively", but (setq hscroll-step 2) does exactly what i want

#+end_src

* search

#+begin_src emacs-lisp
(setq isearch-lazy-count t)
;; (setq isearch-lazy-highlight t)
;; (setq lazy-highlight-initial-delay 0)
(setq lazy-highlight-no-delay-length 1)
#+end_src

* copy & paste

#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
#+end_src

* undo

#+begin_src emacs-lisp
(setq undo-no-redo t)
#+end_src

* indent

#+begin_src emacs-lisp
;; (setq-default tab-width 8)

;; (electric-indent-mode -1)
#+end_src

* extra files

#+begin_src emacs-lisp
(setq make-backup-files nil)
;; stop creating <filename>~
(setq auto-save-default nil)
;; stop creating #<filename>#
(setq create-lockfiles nil)
;; stop creating .#<filename>
(setq auto-save-list-file-prefix nil)
;; stop creating auto-save-list dir
;; (setq url-configuration-directory (concat (getenv "XDG_CACHE_HOME") "/emacs/url"))
;; move url dir
#+end_src

* org

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
;; https://orgmode.org/manual/Activation.html



;; (setq org-link-descriptive nil)

;; (setq org-adapt-indentation nil)
;; (setq org-list-indent-offset 5)
;; 8 - 3 = 5

(setq org-M-RET-may-split-line nil)

(setq org-src-preserve-indentation t)
;; if t, org-src-preserve-indentation override org-edit-src-content-indentation and set it to 0
;; (setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'current-window)

(require 'org-tempo)



(setq org-capture-templates `(
("i" "" entry (file ,(concat (getenv "a_fn") "/_inbox.org")) "* %i%?")
))

(define-key global-map (kbd "C-c i")
  (lambda () (interactive) (org-capture nil "i")))

(setq org-todo-keywords '((sequence "CALE(c)" "NEXT(n)" "PROJ(p)" "|" "DROP(d)")))

(setq org-refile-use-outline-path 'file)
;; https://emacs.stackexchange.com/questions/13353/how-to-use-org-refile-to-move-a-headline-to-a-file-as-a-toplevel-headline
(setq org-refile-targets `(
(,(concat (getenv "a_fn") "/_inbox.org") :maxlevel . 2)
(,(concat (getenv "a_fn") "/calendar.org") :maxlevel . 2)
(,(concat (getenv "a_fn") "/next.org") :maxlevel . 2)
(,(concat (getenv "a_fn") "/project.org") :maxlevel . 2)
))

;; (defun org-refile-inbox ()
;;   (interactive)
;;   (org-map-entries
;;     (lambda ()
;;       (let ((state (org-get-todo-state)) (org-map-continue-from (point-min)))
;;         (cond
;;           ((string= state "CALE")
;;            (org-refile nil nil (list nil (concat (getenv "a_fn") "/calendar.org")))
;;           )
;;           ((string= state "NEXT")
;;            (org-refile nil nil (list nil (concat (getenv "a_fn") "/next.org")))
;;           )
;;           ((string= state "PROJ")
;;            (org-refile nil nil (list nil (concat (getenv "a_fn") "/project.org")))
;;           )
;;           ((string= state "DROP")
;;            (org-cut-subtree)
;;           )
;;           (t
;;            (org-refile nil nil (list nil (concat (getenv "a_fn") "/_inbox.org")))
;;           )
;;         )
;;       )
;;     )
;;   )
;; )

(global-set-key (kbd "C-c r") 'org-refile-inbox)

(setq org-agenda-files `(
,(concat (getenv "a_fn") "/calendar.org")
,(concat (getenv "a_fn") "/next.org")
,(concat (getenv "a_fn") "/project.org")
))
#+end_src

* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ package

emacs has a built-in package manager called "package.el"
it installs packages from "elpa"
elpa: emacs lisp package archive

gnuelpa: gnu elpa
nongnuelpa: non gnu elpa
melpa: milkypostmanâ€™s elpa

| elpa name  | official | enabled by default |
|------------+----------+--------------------|
| gnuelpa    |        1 |                  1 |
| nongnuelpa |        1 |                  1 |
| melpa      |        0 |                  0 |

https://www.emacswiki.org/emacs/InstallingPackages
https://melpa.org/#/getting-started

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; (setq package-user-dir (concat (getenv "XDG_CACHE_HOME") "/emacs/elpa"))

(setq package-selected-packages '(
color-theme-sanityinc-solarized
solarized-theme
minions
rainbow-mode

xclip

evil
evil-anzu
evil-cleverparens
evil-collection
evil-commentary
evil-surround

uuidgen
org-journal
org-roam
org-roam-ui

dirvish
vterm
fcitx
magit
sudo-edit
))
;; M-x package-refresh-contents
;; M-x package-install-selected-packages
;; M-x package-autoremove

(package-initialize)

(defun my-every (@list) "return t if all elements are true" (eval `(and ,@ @list)))
(if (not (my-every (mapcar 'package-installed-p package-selected-packages))) (error "Package missing"))
;; need to be put after (package-initialize), don't know why for now



;; https://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name
;; https://emacs.stackexchange.com/questions/28932/how-to-automate-installation-of-packages-with-emacs-file
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Errors.html
;; http://xahlee.info/emacs/emacs/elisp_mapcar_loop.html
;; http://xahlee.info/emacs/misc/emacs_lisp_some_and_every.html
#+end_src

#+begin_src emacs-lisp
(setq load-path (cons (concat (getenv "XDG_CONFIG_HOME") "/emacs/lisp") load-path))
;; add "$XDG_CONFIG_HOME/emacs" to load-path
;; http://xahlee.info/emacs/emacs/elisp_library_system.html
#+end_src

* appearance

#+begin_src emacs-lisp
(load "dl.el")

(minions-mode 1)
#+end_src

* evil

https://evil.readthedocs.io/en/latest/index.html

#+begin_src emacs-lisp
;; keybindings and other behaviour
(setq evil-want-C-i-jump nil)
(setq evil-want-C-u-delete t)
(setq evil-want-C-u-scroll t)
(setq evil-want-Y-yank-to-eol t)
(setq evil-disable-insert-state-bindings t)

;; search
;; (setq evil-search-module 'isearch)
(setq evil-search-module 'evil-search)

;; isearch
;; (setq evil-flash-delay 0)

;; evil-search
;; (setq evil-ex-search-case 'smart)
;; (setq evil-ex-search-vim-style-regexp nil)
;; (setq evil-ex-search-interactive nil)
;; (setq evil-ex-search-incremental t)
;; (setq evil-ex-search-highlight-all nil)
;; (setq evil-ex-search-persistent-highlight nil)

;; indentation
(setq evil-shift-width 8)

;; cursor movement
(setq evil-move-cursor-back nil)
(setq evil-move-beyond-eol t)
(setq evil-cross-lines t)
(setq evil-start-of-line t)

;; cursor display
(setq evil-normal-state-cursor t)
(setq evil-insert-state-cursor t)
(setq evil-visual-state-cursor t)
(setq evil-replace-state-cursor t)
(setq evil-operator-state-cursor t)
(setq evil-motion-state-cursor t)
(setq evil-emacs-state-cursor t)

;; miscellaneous
(setq evil-undo-system 'undo-redo)

;; evil-collection
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
;; https://github.com/emacs-evil/evil-collection#installation

;; require evil
(require 'evil)
;; some variables need to be set before evil is loaded, keymap need to be set after evil is loaded, so put this line here

;; keymaps
(evil-set-leader '(normal motion) (kbd "RET"))

(define-key evil-insert-state-map (kbd "C-w") 'evil-delete-backward-word)
(define-key evil-insert-state-map (kbd "C-u") 'evil-delete-back-to-indentation)
(define-key evil-insert-state-map (kbd "C-p") 'evil-complete-previous)
(define-key evil-insert-state-map (kbd "C-n") 'evil-complete-next)
;; (define-key evil-insert-state-map (kbd "C-s") nil)
(define-key evil-insert-state-map (kbd "C-r") 'evil-paste-from-register)
(define-key evil-insert-state-map (kbd "C-o") 'evil-execute-in-normal-state)

(define-key evil-normal-state-map (kbd "z o") 'evil-open-fold-rec)
(define-key evil-normal-state-map (kbd "J") 'evil-collection-unimpaired-insert-newline-below)
(define-key evil-normal-state-map (kbd "K") 'evil-collection-unimpaired-insert-newline-above)
;; (define-key evil-normal-state-map (kbd "J") (lambda () (interactive) (evil-ex-execute "put _")))
;; (define-key evil-normal-state-map (kbd "K") (lambda () (interactive) (evil-ex-execute "put! _")))
;; (define-key evil-normal-state-map (kbd "J") (kbd ":put SPC _"))
;; (define-key evil-normal-state-map (kbd "K") (kbd ":put! SPC _"))
;; (define-key evil-normal-state-map (kbd "C-s") nil)
(define-key evil-normal-state-map (kbd "M-c") 'calendar)

;; http://xahlee.info/emacs/emacs/keyboard_shortcuts_examples.html
;; https://stackoverflow.com/questions/20438900/key-map-for-ex-command-in-emacs-evil-mode

;; enable evil
(evil-mode 1)
#+end_src

* evil plugin

#+begin_src emacs-lisp
(require 'evil-anzu)
(global-anzu-mode 1)

;; (evil-collection-translate-key nil 'evil-normal-state-map
;; "a" "b"
;; )
;; (setq evil-collection-mode-list '())
(setq evil-collection-setup-minibuffer t)
(evil-collection-init)
;; https://www.emacswiki.org/emacs/PrefixKey
;; https://emacs.stackexchange.com/questions/6037/emacs-bind-key-to-prefix

(evil-commentary-mode 1)

(global-evil-surround-mode 1)
#+end_src

* org journal

#+begin_src emacs-lisp
(setq org-journal-dir (getenv "a_id"))
(setq org-journal-file-format "%F")
(setq org-journal-date-prefix "#+title ")
(setq org-journal-date-format "%F")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "%F %a %H:%M%n")
(setq org-journal-hide-entries-p nil)

(require 'org-journal)

(evil-define-key 'normal calendar-mode-map (kbd "<leader> a") 'org-journal-new-date-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader> j") 'org-journal-read-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader> k") 'org-journal-display-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader> h") 'org-journal-previous-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader> l") 'org-journal-next-entry)
(evil-define-key 'normal calendar-mode-map (kbd "<leader> m") 'org-journal-mark-entries)
;; (global-set-key (kbd "C-c j a") 'org-journal-new-entry)
#+end_src

* org roam

#+begin_src emacs-lisp
;; (setq org-property-format "%-10s %s")
(setq org-property-format "%-15s %s")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (setq org-id-ts-format "%Y%m%dT%H%M%S.%6N")
(setq org-id-ts-format "%Y-%m-%d-%H%M%S-%6N")
(setq org-id-method 'ts)
(global-set-key (kbd "C-c n a") #'org-id-get-create)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; https://www.orgroam.com/manual.html
;; https://github.com/org-roam/org-roam/issues/2031

;; (setq org-roam-directory (file-truename "~/org-roam"))
(setq org-roam-directory (getenv "a_id"))
;; (setq org-roam-capture-templates '(
;; ("d" "default" plain "%?"
;;      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
;;                         "#+title: ${title}\n")
;;      :unnarrowed t)
;; ))
(require 'uuidgen)
(setq org-roam-capture-templates '(
("d" "default" plain "%?"
     :target (file+head "%(uuidgen-1).org"
                        "#+title: ${title}\n")
     :unnarrowed t)
))

(global-set-key (kbd "C-c n f") #'org-roam-node-find)
(global-set-key (kbd "C-c n i") #'org-roam-node-insert)
(global-set-key (kbd "C-c n c") #'org-roam-capture)

(global-set-key (kbd "C-c n b") #'org-roam-buffer-toggle)
(global-set-key (kbd "C-c n g") #'org-roam-graph)



;; (setq org-roam-dailies-directory "")

;; (global-set-key (kbd "C-c n h") #'org-roam-dailies-goto-yesterday)
;; (global-set-key (kbd "C-c n j") #'org-roam-dailies-goto-today)
;; (global-set-key (kbd "C-c n l") #'org-roam-dailies-goto-tomorrow)
;; (global-set-key (kbd "C-c n k") #'org-roam-dailies-goto-date)



(org-roam-db-autosync-mode)
#+end_src

* dirvish

#+begin_src emacs-lisp
(dirvish-override-dired-mode)
#+end_src

* misc

#+begin_src emacs-lisp
(xclip-mode 1)

(require 'sudo-edit)

(setq fcitx-remote-command "fcitx5-remote")
(fcitx-aggressive-setup)
;; https://github.com/cute-jumper/fcitx.el/issues?q=fcitx5
;; https://kisaragi-hiu.com/why-fcitx5
#+end_src
