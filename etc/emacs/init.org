#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* core

** lexical binding

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-

;; https://github.com/nordtheme/emacs/issues/59#issuecomment-414882071
;; https://www.emacswiki.org/emacs/LexicalBinding
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html
#+end_src

** tangle when saving

#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle :append :local)))
;; run "org-babel-tangle" when saving any org buffer
;; manually: C-c C-v t
;; https://leanpub.com/lit-config/read#leanpub-auto-emacs-and-org-mode

(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name) (concat (getenv "a_gi") "/.local/etc/emacs/init.org"))
    (org-babel-tangle)
  )
)
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
;; run "org-babel-tangle" when saving init.org
#+end_src

** appearance

#+begin_src emacs-lisp
(setq inhibit-x-resources t)
;; (setq inhibit-x-resources t) seems also (setq inhibit-startup-screen t)



(menu-bar-mode -1)

(tool-bar-mode -1)

(set-fringe-mode 0)
;; https://stackoverflow.com/questions/11373826/how-to-disable-fringe-in-emacs

(scroll-bar-mode -1)

(setq display-line-numbers-type 'visual)
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users
(setq display-line-numbers-current-absolute nil)
;; so that the line number width will not change, current absolute line number can be found in mode line
(global-display-line-numbers-mode 1)

(setq mode-line-client "")
;; https://emacs.stackexchange.com/questions/4018/reduce-the-space-between-elements-in-modeline
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html#Mode-Line-Variables

;; (line-number-mode 1)
;; (setq column-number-indicator-zero-based nil)
;; better not (setq column-number-indicator-zero-based nil), because this is different from assumption
(column-number-mode 1)

(setq echo-keystrokes 0.001)

(setq completions-format 'vertical)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; (global-visual-line-mode 1)
(set-default 'truncate-lines t)
;; https://www.emacswiki.org/emacs/TruncateLines
;; https://emacs.stackexchange.com/questions/78532/mixed-display-line-numbers-type-for-evil-users

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; (add-to-list 'default-frame-alist
;;              '(font . "monospace-15"))
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html

(defun centaur-setup-fonts ()
(when (display-graphic-p)
(set-face-attribute 'default nil :family "monospace" :height 150)
(set-fontset-font t 'symbol (font-spec :family "Symbola") nil 'prepend)
(set-fontset-font t 'emoji (font-spec :family "Twemoji") nil 'prepend)
(set-fontset-font t 'han (font-spec :family "Sarasa Term SC"))
(setq face-font-rescale-alist '(("Twemoji" . 0.9) ("Sarasa Term SC" . 1.1)))
))
(centaur-setup-fonts)
;; (add-hook 'window-setup-hook #'centaur-setup-fonts)
(add-hook 'server-after-make-frame-hook #'centaur-setup-fonts)
;; https://github.com/seagle0128/.emacs.d/blob/master/custom-example.el
;; https://github.com/VitalyAnkh/config/blob/master/doom/config.org#font-face

;; (setq whitespace-style '(face trailing tabs tab-mark))
(setq whitespace-style '(face trailing tabs))
(setq whitespace-display-mappings '(
))
(global-whitespace-mode 1)
;; http://xahlee.info/emacs/emacs/whitespace-mode.html
;; http://xahlee.info/emacs/emacs/emacs_init_whitespace_mode.html

(setq show-paren-delay 0)
(show-paren-mode 1)

;; (defun set-prettify-symbols-alist ()
;; (setq prettify-symbols-alist '(
;; ("lambda" . "λ")
;; ("circle" . "○")
;; ))
;; )
;; (add-hook 'prog-mode-hook 'set-prettify-symbols-alist)
;; (global-prettify-symbols-mode 1)

(blink-cursor-mode 0)
#+end_src

** scroll

#+begin_src emacs-lisp
;; vertical scrolling

;; (setq scroll-margin 0)
;; (setq scroll-step 0)
;; when point moves off the screen, move window this line to make point visible, if failed, center the point
(setq scroll-conservatively most-positive-fixnum)
;; when point moves off the screen, move window up to this line to make point visible, if failed, center the point
;; https://www.gnu.org/software/emacs/manual/html_node/efaq/Scrolling-only-one-line.html
;; (setq scroll-down-aggressively 0.5)
;; (setq scroll-up-aggressively 0.5)

;; horizontal scrolling

(setq hscroll-margin 0)
;; (setq hscroll-conservatively nil)
;; "hscroll-conservatively" doesn't exist in emacs
;; (setq hscroll-step 2)
;; the behaviour of "hscroll-step" is strange

;; scroll & cursor
(setq next-screen-context-lines 0)
(setq scroll-preserve-screen-position t)
#+end_src

** search

#+begin_src emacs-lisp
(setq isearch-lazy-count t)
;; (setq isearch-lazy-highlight t)
;; (setq lazy-highlight-initial-delay 0)
(setq lazy-highlight-no-delay-length 1)
#+end_src

** copy & paste

#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
#+end_src

** undo

#+begin_src emacs-lisp
(setq undo-no-redo t)
#+end_src

** indent

#+begin_src emacs-lisp
;; (setq-default tab-width 8)
(setq-default indent-tabs-mode nil)
(setq-default tab-always-indent 'complete)
;; (electric-indent-mode -1)
;; electric-indent-mode is a global minor mode that automatically indents the line after every RET you type, enabled by default
;; http://xahlee.info/emacs/emacs/emacs_tabs_space_indentation_setup.html

(setq sh-basic-offset 8)
#+end_src

** save

#+begin_src emacs-lisp
(setq save-silently t)

;; (setq require-final-newline nil)
;; (setq mode-require-final-newline nil)
;; https://stackoverflow.com/questions/13574564/emacs-automatically-adding-a-newline-even-after-changing-emacs

(setq auto-save-visited-interval 1)
(auto-save-visited-mode 1)
;; http://xahlee.info/emacs/emacs/emacs_auto_save.html

(global-auto-revert-mode 1)
#+end_src

** extra files

#+begin_src emacs-lisp
(setq make-backup-files nil)
;; stop creating <filename>~
(setq auto-save-default nil)
;; stop creating #<filename>#
(setq create-lockfiles nil)
;; stop creating .#<filename>
(setq auto-save-list-file-prefix nil)
;; stop creating auto-save-list dir
;; (setq url-configuration-directory "~/.emacs.d/url")
;; move url dir
#+end_src

** misc

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
;; https://manateelazycat.github.io/2016/03/08/emacs-basic-config/

;; (setq ring-bell-function 'ignore)
;; https://manateelazycat.github.io/2016/03/08/emacs-basic-config/

(defalias 'list-buffers 'ibuffer)
#+end_src

* package

emacs has a built-in package manager called "package.el"
it installs packages from "elpa"
elpa: emacs lisp package archive

gnuelpa: gnu elpa
nongnuelpa: non gnu elpa
melpa: milkypostman’s elpa

| elpa name  | official | enabled by default |
|------------+----------+--------------------|
| gnuelpa    |        1 |                  1 |
| nongnuelpa |        1 |                  1 |
| melpa      |        0 |                  0 |

https://www.emacswiki.org/emacs/InstallingPackages
https://melpa.org/#/getting-started

** package-initialize

#+begin_src emacs-lisp
(require 'package)

;; (add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(setq package-archives '(
("gnu"          . "https://elpa.gnu.org/packages/")
;; ("gnu-devel"    . "https://elpa.gnu.org/devel/")
("nongnu"       . "https://elpa.nongnu.org/nongnu/")
("melpa"        . "https://melpa.org/packages/")
("melpa-stable" . "https://stable.melpa.org/packages/")
))

;; (setq package-archives '(
;; ("gnu-cn"          . "http://1.15.88.122/gnu/")
;; ("nongnu-cn"       . "http://1.15.88.122/nongnu/")
;; ("melpa-cn"        . "http://1.15.88.122/melpa/")
;; ("melpa-stable-cn" . "http://1.15.88.122/stable-melpa/")
;; ))
;; https://elpamirror.emacs-china.org/

;; (setq package-user-dir "~/.emacs.d/elpa")

(setq package-selected-packages '(
;; color-theme-sanityinc-solarized
;; color-theme-sanityinc-tomorrow
;; nord-theme
;; org-gtd
;; solarized-theme
;; valign
dirvish
doom-themes
evil
evil-anzu
evil-cleverparens
evil-collection
evil-commentary
evil-lion
evil-org
evil-replace-with-char
evil-replace-with-register
evil-rsi
evil-surround
fcitx
magit
minions
org-journal
org-roam
org-roam-ui
paredit
rainbow-mode
sudo-edit
uuidgen
vertico
vterm
xclip
orderless
marginalia
consult
embark
company
undo-fu
))
;; M-x package-refresh-contents
;; M-x package-install-selected-packages
;; M-x package-autoremove

(package-initialize)

;; https://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name
;; https://emacs.stackexchange.com/questions/28932/how-to-automate-installation-of-packages-with-emacs-file
#+end_src

** check package-selected-packages

#+begin_src emacs-lisp
(defun my-every (@list) "return t if all elements are true" (eval `(and ,@ @list)))
(if (not (my-every (mapcar 'package-installed-p package-selected-packages))) (error "Package missing"))
;; need to be put after (package-initialize), don't know why for now

;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Errors.html
;; http://xahlee.info/emacs/emacs/elisp_mapcar_loop.html
;; http://xahlee.info/emacs/misc/emacs_lisp_some_and_every.html
#+end_src

** load-path

#+begin_src emacs-lisp
(setq load-path (cons "~/.emacs.d/lisp" load-path))
;; http://xahlee.info/emacs/emacs/elisp_library_system.html
#+end_src

** debug

#+begin_src emacs-lisp
;; (top-level)
;; https://emacs.stackexchange.com/questions/75179/how-to-stop-evaluating-within-emacs-for-debugging-purposes

;; (error "Done")
;; https://stackoverflow.com/questions/25393418/stop-execution-of-emacs
#+end_src

* package_basic

** undo-fu

#+begin_src emacs-lisp
(setq undo-fu-ignore-keyboard-quit t)
#+end_src

** xclip

#+begin_src emacs-lisp
(xclip-mode 1)
;; copy between *terminal* emacs and x clipboard
#+end_src

** sudo-edit

#+begin_src emacs-lisp
(require 'sudo-edit)
#+end_src

** fcitx

#+begin_src emacs-lisp
(setq fcitx-remote-command "fcitx5-remote")
(fcitx-aggressive-setup)
;; https://github.com/cute-jumper/fcitx.el/issues?q=fcitx5
;; https://kisaragi-hiu.com/why-fcitx5
#+end_src

** COMMENT uuidgen

#+begin_src emacs-lisp
(require 'uuidgen)
#+end_src

* package_evil

** evil

https://evil.readthedocs.io/en/latest/index.html

*** keybindings and other behaviour

#+begin_src emacs-lisp
;; (setq evil-want-C-i-jump nil)

(setq evil-want-C-u-delete t)
(setq evil-want-C-u-scroll t)
;; https://www.reddit.com/r/emacs/comments/9j34bf/evil_and_the_universal_argument/

(setq evil-want-C-w-in-emacs-state t)
(setq evil-want-Y-yank-to-eol t)
(setq evil-disable-insert-state-bindings t)
#+end_src

*** search

#+begin_src emacs-lisp
;; (setq evil-search-module 'isearch)
(setq evil-search-module 'evil-search)
#+end_src

*** search_isearch

#+begin_src emacs-lisp
;; (setq evil-flash-delay 0)
#+end_src

*** search_evil-search

#+begin_src emacs-lisp
;; (setq evil-ex-search-case 'smart)
;; (setq evil-ex-search-vim-style-regexp nil)
;; (setq evil-ex-search-interactive nil)
;; (setq evil-ex-search-incremental t)
(setq evil-ex-search-highlight-all nil)
;; (setq evil-ex-search-persistent-highlight nil)
#+end_src

*** indentation

#+begin_src emacs-lisp
(setq evil-shift-width 8)
#+end_src

*** cursor movement

#+begin_src emacs-lisp
(setq evil-move-cursor-back nil)
(setq evil-move-beyond-eol t)
(setq evil-v$-excludes-newline t)
(setq evil-cross-lines t)
(setq evil-start-of-line t)
#+end_src

*** cursor display

#+begin_src emacs-lisp
;; (setq evil-normal-state-cursor t)
;; (setq evil-insert-state-cursor t)
;; (setq evil-visual-state-cursor t)
;; (setq evil-replace-state-cursor t)
;; (setq evil-operator-state-cursor t)
;; (setq evil-motion-state-cursor t)
;; (setq evil-emacs-state-cursor t)

(let ((default '(box "#eceff4")))
(setq evil-normal-state-cursor   default)
(setq evil-insert-state-cursor   default)
(setq evil-visual-state-cursor   default)
(setq evil-replace-state-cursor  default)
(setq evil-operator-state-cursor default)
(setq evil-motion-state-cursor   default)
(setq evil-emacs-state-cursor    default)
)
#+end_src

*** miscellaneous

#+begin_src emacs-lisp
;; (setq evil-undo-system 'undo-redo)
(setq evil-undo-system 'undo-fu)
#+end_src

*** undocumented evil settings

#+begin_src emacs-lisp
(setq evil-want-change-word-to-end nil)
(setq evil-want-minibuffer t)

(setq evil-want-integration t)
(setq evil-want-keybinding nil)
;; whether to load evil-keybindings.el, which provides a set of keybindings for other emacs modes (dired etc)
;; these two variables are required by evil-collection (https://github.com/emacs-evil/evil-collection#installation)
#+end_src

*** enable evil

#+begin_src emacs-lisp
(require 'evil)
;; some variables need to be set before evil is loaded, keymaps need to be set after evil is loaded, so put this line here
(evil-mode 1)
#+end_src

** evil-collection

to override existing binding in evil-collection, bind the key after (evil-collection-init), see this [[https://github.com/emacs-evil/evil-collection/issues/214][issue]]

#+begin_src emacs-lisp
;; (setq evil-collection-mode-list '(
;; ibuffer
;; calendar
;; dired
;; (package-menu package)
;; ))

;; (setq evil-collection-setup-minibuffer t)
;; use (setq evil-want-minibuffer t) instead of (setq evil-collection-setup-minibuffer t)

(setq evil-collection-want-unimpaired-p nil)

(setq evil-collection-key-blacklist '(
"{"
"}"
"C-j"
"C-k"
))



(evil-collection-init)

;; (evil-collection-translate-key nil 'evil-normal-state-map
;; "a" "b"
;; )
#+end_src

** evil-anzu

#+begin_src emacs-lisp
(setq anzu-cons-mode-line-p nil)
;; https://github.com/emacsorphanage/anzu#anzu-cons-mode-line-pdefault-is-t
(require 'evil-anzu)
(setq global-mode-string '(:eval (anzu--update-mode-line)))
;; https://emacs.stackexchange.com/questions/13855/how-to-append-string-that-gets-updated-to-mode-line
(global-anzu-mode 1)
#+end_src

** COMMENT evil-cleverparens

disable for now, because its "M-[" binding break terminal emacs, check:

[[https://emacs.stackexchange.com/questions/68703/m-causes-emacs-to-print-weird-possibly-escape-sequences]]

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)
#+end_src

** evil-commentary

#+begin_src emacs-lisp
(evil-commentary-mode 1)
#+end_src

** evil-lion

#+begin_src emacs-lisp
(evil-lion-mode)
#+end_src

** COMMENT evil-org

#+begin_src emacs-lisp
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(setq evil-org-key-theme '(navigation textobjects additional calendar))
(evil-org-set-key-theme)
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

** COMMENT evil-rsi

#+begin_src emacs-lisp
(evil-rsi-mode)
#+end_src

** evil-surround

#+begin_src emacs-lisp
(global-evil-surround-mode 1)
#+end_src

* package_appearance

** load-theme ?

#+begin_src emacs-lisp
;; (load-theme 'nord t)
;; https://github.com/nordtheme/emacs/issues/59#issuecomment-414882071

;; (load "dl.el")

(load-theme 'doom-nord t)
#+end_src

** minions

#+begin_src emacs-lisp
(minions-mode 1)
#+end_src

* package_org

** org

#+begin_src emacs-lisp
;; (setq load-path (cons "~/.emacs.d/src/org-mode/lisp" load-path))
;; org 9.7 is not compatible with org-roam, see https://github.com/org-roam/org-roam/issues/2361



(setq org-startup-folded nil)

;; (setq org-adapt-indentation nil)
;; * level 1
;;   * level 2

;; (setq org-list-indent-offset 6)
;; - fruit
;;         - apple
;;         - banana
;; 8 - 2 = 6

(setq org-link-descriptive nil)

;; (setq org-edit-src-content-indentation 0)
(setq org-src-preserve-indentation t)
;; (setq org-src-preserve-indentation t) force (setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'current-window)

;; (setq org-property-format "%-10s %s")
;; (setq org-property-format "%-15s %s")
(setq org-property-format "%s %s")



(setq org-startup-with-inline-images t)

(setq org-image-actual-width (list 960))
;; https://stackoverflow.com/a/69339844/18034992

;; (setq org-cycle-inline-images-display t)
;; org-cycle-inline-images-display only affects the command org-cycle (bound to TAB by default)

;; https://orgmode.org/manual/Images.html



;; (setq org-startup-with-latex-preview t)
;; (setq org-preview-latex-default-process 'dvisvgm)
;; (setq org-preview-latex-process-alist
;; https://emacs-china.org/t/org-mode-latex-improved-latex-preview/23742



;; (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "CANC(c)" "|" "DONE(d)")))
;; https://orgmode.org/manual/Workflow-states.html

(setq org-agenda-files `(,(getenv "a_aj")))

(setq org-capture-templates `(
("a" "inbox" entry (file ,(concat (getenv "a_aj") "/inbox.org")) "* %i%?")
))

(setq org-refile-use-outline-path 'file)
;; https://emacs.stackexchange.com/questions/13353/how-to-use-org-refile-to-move-a-headline-to-a-file-as-a-toplevel-headline
(setq org-refile-targets `(
;; (,(concat (getenv "a_aj") "/inbox.org") :maxlevel . 2)
(,(directory-files-recursively (getenv "a_aj") "\.org$") :maxlevel . 2)
))

;; (setq org-id-ts-format "%Y%m%dT%H%M%S.%6N")
(setq org-id-ts-format "%Y-%m-%d-%H%M%S-%6N")
(setq org-id-method 'ts)
#+end_src

** COMMENT org-tempo

org mode now bundle with =C-c C-,= (org-insert-structure-template), obsolete org-tempo

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** COMMENT valign

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'valign-mode)
#+end_src

** COMMENT org-gtd

#+begin_src emacs-lisp
(setq org-edna-use-inheritance t)
(org-edna-mode 1)
;; https://github.com/Trevoke/org-gtd.el/blob/master/doc/org-gtd.org#required-configuration-of-sub-packages



(setq org-gtd-update-ack "3.0.0")
(setq org-gtd-directory (getenv "a_aj"))
(setq org-gtd-capture-templates '(
("i" "" entry (file org-gtd-inbox-path) "* %i%?")
))

(require 'org-gtd)
#+end_src

** org-roam

#+begin_src emacs-lisp
;; https://www.orgroam.com/manual.html
;; https://github.com/org-roam/org-roam/issues/2031

;; (setq org-roam-directory (file-truename "~/org-roam"))
(setq org-roam-directory (getenv "a_ak"))

;; (setq org-roam-capture-templates '(
;; ("d" "default" plain "%?"
;;      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
;;                         "#+title: ${title}\n")
;;      :unnarrowed t)
;; ))
(setq org-roam-capture-templates '((
"d"
"default"
plain
"%?"
;; :target (file+head "%(uuidgen-1).org" "#+title: ${title}\n")
:target (file+head "${title}.org" "#+title: ${title}\n")
:unnarrowed t
)))

(setq org-roam-node-formatter "link")
;; https://github.com/org-roam/org-roam/issues/1892

;; (setq org-roam-dailies-directory "")

(org-roam-db-autosync-mode)

(defun org-title-to-file-name ()
  (interactive)
  (when (and
         (not (null (buffer-file-name)))
         (not (null (org-get-title)))
         )
    (let (
          (title (org-get-title))
          (name (file-name-sans-extension (file-name-nondirectory (buffer-file-name))))
          )
      (when (not (string= title name))
        (let (
              (old-file-name (file-name-nondirectory (buffer-file-name)))
              (new-file-name (concat title ".org"))
              )
          (rename-file old-file-name new-file-name)
          (find-file new-file-name)
          (kill-buffer old-file-name)
          (message "Renamed %s to %s." old-file-name new-file-name)
          )))))
(add-hook 'org-mode-hook 'org-title-to-file-name)
;; https://emacs.stackexchange.com/questions/54809/rename-org-buffers-to-orgs-title-instead-of-filename
#+end_src

** org-journal

#+begin_src emacs-lisp
(setq org-journal-dir (getenv "a_al"))
(setq org-journal-file-format "%F.txt")
(setq org-journal-date-prefix "#+title ")
(setq org-journal-date-format "%F")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "%F %a %H:%M%n")
(setq org-journal-hide-entries-p nil)

(require 'org-journal)
#+end_src

* package_dired

** dired

#+begin_src emacs-lisp
;; http://xahlee.info/emacs/emacs/file_management.html

(setq dired-listing-switches "-Ahv --group-directories-first -l")

;; (setq dired-kill-when-opening-new-dired-buffer t)
;; https://emacs-china.org/t/emacs-28-dired-kill-when-opening-new-dired-buffer/20655
#+end_src

** COMMENT dirvish

#+begin_src emacs-lisp
(dirvish-override-dired-mode)
;; https://emacs-china.org/t/dirvish-dired/20189/60
#+end_src

* package_minibuffer

** vertico

#+begin_src emacs-lisp
(setq vertico-scroll-margin 0)
(setq vertico-count 10)
;; (setq vertico-resize t)
(setq vertico-cycle t)

(vertico-mode)
#+end_src

** orderless

#+begin_src emacs-lisp
;; (require 'orderless)
(setq completion-styles '(orderless basic))
(setq completion-category-overrides '((file (styles basic partial-completion))))
#+end_src

** marginalia

#+begin_src emacs-lisp
;; (require 'marginalia)
(marginalia-mode)
#+end_src

** COMMENT consult

#+begin_src emacs-lisp
(global-set-key (kbd "") 'consult-line)
#+end_src

** COMMENT embark

#+begin_src emacs-lisp
(global-set-key (kbd "") 'embark-act)
#+end_src

* package_completion

** COMMENT company

#+begin_src emacs-lisp
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 0)

(global-company-mode 1)
#+end_src

* package_misc

** COMMENT package_eaf

#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
(setq load-path (cons "~/.emacs.d/src/eaf" load-path))
(require 'eaf)
(require 'eaf-demo)

(require 'eaf-file-manager)
(require 'eaf-pdf-viewer)
(require 'eaf-browser)

;; (require 'eaf-evil)
#+end_src

* keybindings

** core

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-c")
(lambda () (interactive)
(let ((current-prefix-arg '(4)))
     (call-interactively #'save-buffers-kill-terminal))
))
;; https://emacs.stackexchange.com/questions/50672/how-to-save-all-modified-buffers-and-kill-emacs
;; https://emacs.stackexchange.com/questions/48753/how-to-bind-c-u-m-x-shell-to-c-c-s

(global-set-key (kbd "<f5>") 'universal-argument)
(define-key universal-argument-map (kbd "<f5>") 'universal-argument-more)
;; https://emacs.stackexchange.com/questions/58319/how-to-rebind-special-meaning-of-c-u-to-a-different-key
#+end_src

** evil

#+begin_src emacs-lisp
(evil-set-leader nil (kbd "SPC"))

(with-eval-after-load 'evil
  (defadvice forward-evil-paragraph (around default-values activate)
    (let ((paragraph-start (default-value 'paragraph-start))
          (paragraph-separate (default-value 'paragraph-separate)))
      ad-do-it)))
;; https://emacs.stackexchange.com/questions/38596/make-evil-paragraphs-behave-like-vim-paragraphs

;; (defun evil-aidan-scroll-line-to-1/4 ()
;; (interactive)
;; (recenter (/ (window-body-height) 4))
;; )
;; (defun evil-aidan-scroll-line-to-3/4 ()
;; (interactive)
;; (recenter (- (/ (window-body-height) 4)))
;; )



;; (with-eval-after-load 'evil-maps
(define-key evil-motion-state-map (kbd "SPC") nil)
;; (define-key evil-motion-state-map (kbd "RET") nil)
;; (define-key evil-motion-state-map (kbd "TAB") nil)
;; )
;; https://emacs.stackexchange.com/questions/46371/how-can-i-get-ret-to-follow-org-mode-links-when-using-evil-mode

(define-key evil-motion-state-map (kbd ";") 'evil-ex)
;; (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
;; https://stackoverflow.com/questions/34497696/swap-and-to-make-colon-commands-easier-to-type-in-emacs
;; https://emacs.stackexchange.com/questions/26450/how-to-remap-to-in-evil-mode



;; (define-key evil-normal-state-map (kbd "C-s") 'evil-scroll-line-down)
;; (define-key evil-normal-state-map (kbd "C-y") 'evil-scroll-line-up)
;; (define-key evil-normal-state-map (kbd "C-k") 'evil-aidan-scroll-line-to-1/4)
;; (define-key evil-normal-state-map (kbd "C-j") 'evil-aidan-scroll-line-to-3/4)
(define-key evil-normal-state-map (kbd "C-j") 'evil-scroll-line-to-top)
(define-key evil-normal-state-map (kbd "C-k") 'evil-scroll-line-to-bottom)
(define-key evil-normal-state-map (kbd "C-l") 'evil-scroll-line-to-center)

(define-key evil-normal-state-map (kbd "z i") 'evil-open-fold)
(define-key evil-normal-state-map (kbd "z o") 'evil-open-fold-rec)
;; (define-key evil-normal-state-map (kbd "z c") 'evil-close-fold)
;; (define-key evil-normal-state-map (kbd "z a") 'evil-toggle-fold)
;; (define-key evil-normal-state-map (kbd "z r") 'evil-open-folds)
;; (define-key evil-normal-state-map (kbd "z m") 'evil-close-folds)
;; https://github.com/emacs-evil/evil/blob/master/evil-maps.el

(define-key evil-normal-state-map (kbd "J") (lambda () (interactive) (evil-ex-execute "put _")))
(define-key evil-normal-state-map (kbd "K") (lambda () (interactive) (evil-ex-execute "put! _")))
;; https://stackoverflow.com/questions/20438900/key-map-for-ex-command-in-emacs-evil-mode
;; (define-key evil-normal-state-map (kbd "J") (kbd ":put SPC _"))
;; (define-key evil-normal-state-map (kbd "K") (kbd ":put! SPC _"))
;; (define-key evil-normal-state-map (kbd "J") 'evil-collection-unimpaired-insert-newline-below)
;; (define-key evil-normal-state-map (kbd "K") 'evil-collection-unimpaired-insert-newline-above)



;; (define-key evil-insert-state-map (kbd "C-s") 'evil-scroll-line-down)
;; (define-key evil-insert-state-map (kbd "C-y") 'evil-scroll-line-up)
;; (define-key evil-insert-state-map (kbd "C-k") 'evil-aidan-scroll-line-to-1/4)
;; (define-key evil-insert-state-map (kbd "C-j") 'evil-aidan-scroll-line-to-3/4)
(define-key evil-insert-state-map (kbd "C-j") 'evil-scroll-line-to-top)
(define-key evil-insert-state-map (kbd "C-k") 'evil-scroll-line-to-bottom)
(define-key evil-insert-state-map (kbd "C-l") 'evil-scroll-line-to-center)

(define-key evil-insert-state-map (kbd "C-w") 'evil-delete-backward-word)
(define-key evil-insert-state-map (kbd "C-u") 'evil-delete-back-to-indentation)
(define-key evil-insert-state-map (kbd "C-p") 'evil-complete-previous)
(define-key evil-insert-state-map (kbd "C-n") 'evil-complete-next)
(define-key evil-insert-state-map (kbd "C-r") 'evil-paste-from-register)
(define-key evil-insert-state-map (kbd "C-o") 'evil-execute-in-normal-state)



(define-key evil-window-map (kbd ";") 'evil-ex)
#+end_src

** evil-replace-with-char

#+begin_src emacs-lisp
(require 'evil-replace-with-char)
(define-key evil-normal-state-map "gr" 'evil-operator-replace-with-char)
#+end_src

** evil-replace-with-register

#+begin_src emacs-lisp
(require 'evil-replace-with-register)
(setq evil-replace-with-register-key (kbd "gp"))
(evil-replace-with-register-install)
#+end_src

** outline

#+begin_example
outline mode logic:

       leaf
     /
node
     \
       node

so only 4 functions are needed:

show-leaf
hide-leaf
show-node
hide-node
#+end_example

#+begin_src emacs-lisp
;; visibility_local:
(evil-define-key 'normal outline-mode-map (kbd "z y") 'outline-show-entry)
(evil-define-key 'normal outline-mode-map (kbd "z u") 'outline-show-children)
(evil-define-key 'normal outline-mode-map (kbd "z j") 'outline-show-branches) ; also hide leaves
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-show-subtree)
(evil-define-key 'normal outline-mode-map (kbd "z x") 'outline-hide-entry)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-leaves)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-subtree)

;; visibility_global:
(evil-define-key 'normal outline-mode-map (kbd "z k") 'outline-show-only-headings)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-show-all)
(evil-define-key 'normal outline-mode-map (kbd "z f") 'outline-hide-other)
;; (evil-define-key 'normal outline-mode-map (kbd "z a") 'outline-hide-body)
(evil-define-key 'normal outline-mode-map (kbd "z g") 'outline-hide-sublevels)
;; https://github.com/emacs-evil/evil-collection/blob/master/modes/outline/evil-collection-outline.el
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Visibility.html

;; motion:
(evil-define-key 'normal outline-mode-map (kbd "<down>") 'outline-next-visible-heading)
(evil-define-key 'normal outline-mode-map (kbd "<up>") 'outline-previous-visible-heading)
(evil-define-key 'normal outline-mode-map (kbd "<next>") 'outline-forward-same-level)
(evil-define-key 'normal outline-mode-map (kbd "<prior>") 'outline-backward-same-level)
(evil-define-key 'normal outline-mode-map (kbd "<left>") 'outline-up-heading)

;; edit:
(evil-define-key '(normal insert) outline-mode-map (kbd "M-j") 'outline-move-subtree-down)
(evil-define-key '(normal insert) outline-mode-map (kbd "M-k") 'outline-move-subtree-up)
(evil-define-key '(normal insert) outline-mode-map (kbd "M-h") 'outline-promote)
(evil-define-key '(normal insert) outline-mode-map (kbd "M-l") 'outline-demote)

(evil-define-key '(normal insert) outline-mode-map (kbd "M-RET") 'outline-insert-heading)
#+end_src

** org

#+begin_src emacs-lisp
;; (setq org-return-follows-link t)

(evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
(evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)
(evil-define-key '(normal insert) org-mode-map (kbd "M-<left>") 'org-shiftmetaleft)
(evil-define-key '(normal insert) org-mode-map (kbd "M-<right>") 'org-shiftmetaright)

;; (setq org-M-RET-may-split-line nil)
(evil-define-key '(normal insert) org-mode-map (kbd "M-RET") 'org-meta-return)


(global-set-key (kbd "C-c s") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
;; https://orgmode.org/manual/Activation.html



(evil-define-key 'normal 'global (kbd "<leader>ja") (lambda () (interactive) (org-capture nil "a")))
(evil-define-key 'normal 'global (kbd "<leader>jw") 'org-refile)
(evil-define-key 'normal 'global (kbd "<leader>jl") 'org-time-stamp)

(evil-define-key 'normal 'global (kbd "<leader>ka") 'org-id-get-create)

(evil-define-key 'normal 'global (kbd "<leader>l") 'calendar)
#+end_src

** COMMENT org-gtd

#+begin_src emacs-lisp
(global-set-key (kbd "C-c n c") #'org-gtd-capture)
(define-key org-gtd-clarify-map (kbd "RET") #'org-gtd-organize)
#+end_src

** org-roam

#+begin_src emacs-lisp
;; (defun convert-to-orgroam ()
;; (interactive)
;; (let ((new-file-name (concat (uuidgen-1) ".org")))
;; (rename-file buffer-file-name new-file-name)
;; (find-file new-file-name)
;; )
;; (goto-char (point-min))
;; (insert "\n\n")
;; (goto-char (point-min))
;; (org-id-get-create)
;; (beginning-of-line 4)
;; (insert "#+title: ")
;; )
(defun convert-to-orgroam ()
(interactive)
(goto-char (point-min))
(insert "\n\n")
(goto-char (point-min))
(org-id-get-create)
(beginning-of-line 4)
(insert (format "#+title: %s" (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))))
(goto-char (point-min))
)
(evil-define-key 'normal 'global (kbd "<leader>kl") 'convert-to-orgroam)
;; https://org-roam.discourse.group/t/convert-preexisting-org-note-to-org-roam-type/2680



(evil-define-key 'normal 'global (kbd "<leader>kf") 'org-roam-node-find)
(evil-define-key 'normal 'global (kbd "<leader>ki") 'org-roam-node-insert)
(evil-define-key 'normal 'global (kbd "<leader>kc") 'org-roam-capture)
(evil-define-key 'normal 'global (kbd "<leader>kb") 'org-roam-buffer-toggle)
(evil-define-key 'normal 'global (kbd "<leader>kg") 'org-roam-graph)



;; (global-set-key (kbd "C-c n h") #'org-roam-dailies-goto-yesterday)
;; (global-set-key (kbd "C-c n j") #'org-roam-dailies-goto-today)
;; (global-set-key (kbd "C-c n l") #'org-roam-dailies-goto-tomorrow)
;; (global-set-key (kbd "C-c n k") #'org-roam-dailies-goto-date)
#+end_src

** org-journal

#+begin_src emacs-lisp
(evil-define-key 'normal calendar-mode-map (kbd "a") 'org-journal-new-date-entry)
(evil-define-key 'normal calendar-mode-map (kbd "f") 'org-journal-read-entry)
(evil-define-key 'normal calendar-mode-map (kbd "d") 'org-journal-display-entry)
(evil-define-key 'normal calendar-mode-map (kbd "p") 'org-journal-previous-entry)
(evil-define-key 'normal calendar-mode-map (kbd "n") 'org-journal-next-entry)
(evil-define-key 'normal calendar-mode-map (kbd "m") 'org-journal-mark-entries)
#+end_src

